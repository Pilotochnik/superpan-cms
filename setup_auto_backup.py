#!/usr/bin/env python
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
"""

import os
import sys
import platform
from pathlib import Path


def detect_os():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
    system = platform.system().lower()
    if system == 'windows':
        return 'windows'
    elif system in ['linux', 'darwin']:  # Darwin = macOS
        return 'unix'
    else:
        return 'unknown'


def setup_auto_backup():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    print("=" * 70)
    print("üöÄ –ù–ê–°–¢–†–û–ô–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –†–ï–ó–ï–†–í–ù–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 70)
    print("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –∫–∞–∂–¥—ã–µ 3 –¥–Ω—è")
    print("=" * 70)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –û–°
    os_type = detect_os()
    print(f"üñ•Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –û–°: {platform.system()} {platform.release()}")
    
    if os_type == 'windows':
        print("üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Windows (–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á)")
        setup_windows()
    elif os_type == 'unix':
        print("üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Linux/Mac (Cron)")
        setup_unix()
    else:
        print("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
        print("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é")
        show_manual_instructions()


def setup_windows():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Windows"""
    try:
        print("\nüîß –ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Windows...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Windows
        from setup_windows_scheduler import main as setup_windows_main
        setup_windows_main()
        
    except ImportError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Windows")
        show_manual_instructions()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Windows: {e}")
        show_manual_instructions()


def setup_unix():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Unix-—Å–∏—Å—Ç–µ–º"""
    try:
        print("\nüîß –ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Linux/Mac...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Unix
        from setup_cron import main as setup_cron_main
        setup_cron_main()
        
    except ImportError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Unix")
        show_manual_instructions()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Unix: {e}")
        show_manual_instructions()


def show_manual_instructions():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("\nüìã –†–£–ß–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –†–ï–ó–ï–†–í–ù–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 70)
    
    project_dir = Path.cwd().absolute()
    python_exe = sys.executable
    manage_py = project_dir / "manage.py"
    
    print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {project_dir}")
    print(f"üêç Python: {python_exe}")
    print(f"üìÑ manage.py: {manage_py}")
    
    print("\nüïê –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–∞–∂–¥—ã–µ 3 –¥–Ω—è:")
    print(f"   {python_exe} {manage_py} auto_backup --days 3")
    
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞:")
    print(f"   {python_exe} {manage_py} auto_backup --check-only")
    
    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("   python manage.py auto_backup --help")
    print("   python manage.py backup_db --help")
    
    print("\nüõ†Ô∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:")
    
    if platform.system().lower() == 'windows':
        print("   Windows: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á")
        print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á")
        print("   2. –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑–æ–≤—É—é –∑–∞–¥–∞—á—É")
        print("   3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 3 –¥–Ω—è")
        print(f"   4. –î–µ–π—Å—Ç–≤–∏–µ: {python_exe} {manage_py} auto_backup --days 3")
        print(f"   5. –ù–∞—á–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞: {project_dir}")
    else:
        print("   Linux/Mac: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ cron")
        print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ crontab: crontab -e")
        print("   2. –î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É: 0 0 */3 * * cd {project_dir} && {python_exe} {manage_py} auto_backup --days 3")
        print("   3. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏ –∑–∞–∫—Ä–æ–π—Ç–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä")


def test_backup_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –†–ï–ó–ï–†–í–ù–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    try:
        import subprocess
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∏
        print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è...")
        result = subprocess.run([
            sys.executable, "manage.py", "auto_backup", "--check-only"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("üìã –í—ã–≤–æ–¥:")
            print(result.stdout)
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:")
            print(result.stderr)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
        result = subprocess.run([
            sys.executable, "manage.py", "backup_db", "create", "--description", "test_auto_backup", "--auto"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:")
            print(result.stderr)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
        print("\n3. –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...")
        result = subprocess.run([
            sys.executable, "manage.py", "backup_db", "list"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:")
            print(result.stdout)
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞:")
            print(result.stderr)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("3. –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    print("4. –í—ã—Ö–æ–¥")
    
    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): ").strip()
    
    if choice == '1':
        setup_auto_backup()
    elif choice == '2':
        test_backup_system()
    elif choice == '3':
        show_manual_instructions()
    elif choice == '4':
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        main()


if __name__ == '__main__':
    main()
