#!/usr/bin/env python
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SuperPan
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ë–î –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –±—ç–∫–∞–ø—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
"""

import os
import sys
import sqlite3
import datetime
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'superpan.settings')
import django
django.setup()

from django.conf import settings
from django.core.management import call_command
from backup_manager import DatabaseBackupManager


class DatabaseMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.db_path = settings.DATABASES['default']['NAME']
        self.backup_manager = DatabaseBackupManager()
        
    def check_database_integrity(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ë–î
            if not os.path.exists(self.db_path):
                print("‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            db_size = os.path.getsize(self.db_path)
            if db_size == 0:
                print("‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–æ–π!")
                return False
                
            print(f"‚úÖ –†–∞–∑–º–µ—Ä –ë–î: {db_size:,} –±–∞–π—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å SQLite
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º PRAGMA integrity_check
            cursor.execute("PRAGMA integrity_check")
            result = cursor.fetchone()
            
            if result[0] == 'ok':
                print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏")
                conn.close()
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: {result[0]}")
                conn.close()
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î: {e}")
            return False
    
    def check_critical_tables(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü...")
        
        critical_tables = [
            'users',
            'projects', 
            'expense_items',
            'telegram_users'
        ]
        
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            existing_tables = [row[0] for row in cursor.fetchall()]
            
            missing_tables = []
            for table in critical_tables:
                if table in existing_tables:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                    cursor.execute(f"SELECT COUNT(*) FROM {table}")
                    count = cursor.fetchone()[0]
                    print(f"‚úÖ {table}: {count} –∑–∞–ø–∏—Å–µ–π")
                else:
                    missing_tables.append(table)
                    print(f"‚ùå {table}: —Ç–∞–±–ª–∏—Ü–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            conn.close()
            
            if missing_tables:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {missing_tables}")
                return False
            else:
                print("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü: {e}")
            return False
    
    def check_recent_activity(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞...")
        
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏–Ω—ã
            cursor.execute("""
                SELECT COUNT(*) FROM users 
                WHERE last_login > datetime('now', '-1 day')
            """)
            recent_logins = cursor.fetchone()[0]
            print(f"üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 24—á: {recent_logins} –≤—Ö–æ–¥–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö
            cursor.execute("""
                SELECT COUNT(*) FROM projects 
                WHERE updated_at > datetime('now', '-1 day')
            """)
            recent_projects = cursor.fetchone()[0]
            print(f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {recent_projects}")
            
            conn.close()
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            return False
    
    def emergency_backup(self):
        """–°–æ–∑–¥–∞–µ—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"""
        print("üö® –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
        
        try:
            self.backup_manager.create_backup("emergency_backup")
            print("‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return False
    
    def full_check(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î"""
        print("=" * 70)
        print("üîç –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        print("=" * 70)
        print(f"üìÖ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üóÑÔ∏è  –ü—É—Ç—å –∫ –ë–î: {self.db_path}")
        print("=" * 70)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        integrity_ok = self.check_database_integrity()
        tables_ok = self.check_critical_tables()
        activity_ok = self.check_recent_activity()
        
        print("=" * 70)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:")
        print(f"   –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ë–î: {'‚úÖ OK' if integrity_ok else '‚ùå –û–®–ò–ë–ö–ê'}")
        print(f"   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {'‚úÖ OK' if tables_ok else '‚ùå –û–®–ò–ë–ö–ê'}")
        print(f"   –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {'‚úÖ OK' if activity_ok else '‚ùå –û–®–ò–ë–ö–ê'}")
        
        if not (integrity_ok and tables_ok):
            print("=" * 70)
            print("üö® –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò!")
            print("üìã –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
            print("   1. –°–æ–∑–¥–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
            print("   2. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞–±–æ—á–µ–π –∫–æ–ø–∏–∏")
            print("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã")
            print("=" * 70)
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            self.emergency_backup()
            
            return False
        else:
            print("=" * 70)
            print("‚úÖ –ë–ê–ó–ê –î–ê–ù–ù–´–• –í –ù–û–†–ú–ê–õ–¨–ù–û–ú –°–û–°–¢–û–Ø–ù–ò–ò")
            print("=" * 70)
            return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    monitor = DatabaseMonitor()
    
    if len(sys.argv) > 1 and sys.argv[1] == '--emergency':
        # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –±—ç–∫–∞–ø–∞
        print("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        monitor.full_check()
        monitor.emergency_backup()
    else:
        # –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        monitor.full_check()


if __name__ == '__main__':
    main()
