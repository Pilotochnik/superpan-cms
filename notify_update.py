#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö SuperPan
"""

import os
import sys
import requests
import json
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'superpan.settings')
import django
django.setup()

from django.conf import settings


def send_telegram_notification(message, chat_id=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"""
    bot_token = getattr(settings, 'TELEGRAM_BOT_TOKEN', None)
    if not bot_token:
        print("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π chat_id –∏–ª–∏ –±–µ—Ä–µ–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if not chat_id:
        chat_id = getattr(settings, 'TELEGRAM_ADMIN_CHAT_ID', None)
    
    if not chat_id:
        print("TELEGRAM_ADMIN_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    data = {
        'chat_id': chat_id,
        'text': message,
        'parse_mode': 'HTML'
    }
    
    try:
        response = requests.post(url, data=data, timeout=10)
        if response.status_code == 200:
            print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram (chat_id: {chat_id})")
            return True
        else:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status_code}")
            return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False


def send_update_notification(update_type, status, details=""):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    if status == "started":
        message = f"""
üîÑ <b>–ù–∞—á–∞—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ SuperPan</b>

üìÖ –í—Ä–µ–º—è: {timestamp}
üîß –¢–∏–ø: {update_type}
üìã –î–µ—Ç–∞–ª–∏: {details}

‚è≥ –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.
        """
    elif status == "completed":
        message = f"""
‚úÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ SuperPan –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>

üìÖ –í—Ä–µ–º—è: {timestamp}
üîß –¢–∏–ø: {update_type}
üìã –î–µ—Ç–∞–ª–∏: {details}

üåê –°–∏—Å—Ç–µ–º–∞ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞.
        """
    elif status == "failed":
        message = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SuperPan</b>

üìÖ –í—Ä–µ–º—è: {timestamp}
üîß –¢–∏–ø: {update_type}
üìã –î–µ—Ç–∞–ª–∏: {details}

üö® –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
        """
    else:
        message = f"""
‚ÑπÔ∏è <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ SuperPan</b>

üìÖ –í—Ä–µ–º—è: {timestamp}
üîß –¢–∏–ø: {update_type}
üìã –î–µ—Ç–∞–ª–∏: {details}
        """
    
    return send_telegram_notification(message.strip())


def send_maintenance_notification(start_time, end_time, reason=""):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö"""
    message = f"""
üîß <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã SuperPan</b>

üìÖ –ù–∞—á–∞–ª–æ: {start_time}
üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_time}
üìã –ü—Ä–∏—á–∏–Ω–∞: {reason or "–ü–ª–∞–Ω–æ–≤–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"}

‚è≥ –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
    """
    
    return send_telegram_notification(message.strip())


def send_error_notification(error_type, error_details, severity="medium"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    severity_emoji = {
        "low": "‚ÑπÔ∏è",
        "medium": "‚ö†Ô∏è", 
        "high": "üö®",
        "critical": "üí•"
    }
    
    emoji = severity_emoji.get(severity, "‚ö†Ô∏è")
    
    message = f"""
{emoji} <b>–û—à–∏–±–∫–∞ SuperPan</b>

üìÖ –í—Ä–µ–º—è: {timestamp}
üîß –¢–∏–ø: {error_type}
üìä –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: {severity.upper()}
üìã –î–µ—Ç–∞–ª–∏: {error_details}
    """
    
    return send_telegram_notification(message.strip())


def send_backup_notification(backup_type, status, details=""):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    if status == "completed":
        message = f"""
üíæ <b>–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>

üìÖ –í—Ä–µ–º—è: {timestamp}
üîß –¢–∏–ø: {backup_type}
üìã –î–µ—Ç–∞–ª–∏: {details}

‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.
        """
    elif status == "failed":
        message = f"""
‚ùå <b>–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</b>

üìÖ –í—Ä–µ–º—è: {timestamp}
üîß –¢–∏–ø: {backup_type}
üìã –î–µ—Ç–∞–ª–∏: {details}

üö® –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.
        """
    else:
        message = f"""
üíæ <b>–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ</b>

üìÖ –í—Ä–µ–º—è: {timestamp}
üîß –¢–∏–ø: {backup_type}
üìã –î–µ—Ç–∞–ª–∏: {details}
        """
    
    return send_telegram_notification(message.strip())


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è CLI –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    if len(sys.argv) < 3:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python notify_update.py update started manual")
        print("  python notify_update.py update completed manual")
        print("  python notify_update.py update failed '–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π'")
        print("  python notify_update.py maintenance '2024-01-01 02:00' '2024-01-01 03:00' '–ü–ª–∞–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ'")
        print("  python notify_update.py error 'DatabaseError' '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î' high")
        print("  python notify_update.py backup completed '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø'")
        sys.exit(1)
    
    notification_type = sys.argv[1]
    
    if notification_type == "update":
        if len(sys.argv) < 4:
            print("–î–ª—è update –Ω—É–∂–Ω—ã: status –∏ details")
            sys.exit(1)
        status = sys.argv[2]
        details = sys.argv[3] if len(sys.argv) > 3 else ""
        send_update_notification("manual", status, details)
    
    elif notification_type == "maintenance":
        if len(sys.argv) < 5:
            print("–î–ª—è maintenance –Ω—É–∂–Ω—ã: start_time, end_time, reason")
            sys.exit(1)
        start_time = sys.argv[2]
        end_time = sys.argv[3]
        reason = sys.argv[4] if len(sys.argv) > 4 else ""
        send_maintenance_notification(start_time, end_time, reason)
    
    elif notification_type == "error":
        if len(sys.argv) < 4:
            print("–î–ª—è error –Ω—É–∂–Ω—ã: error_type, error_details, [severity]")
            sys.exit(1)
        error_type = sys.argv[2]
        error_details = sys.argv[3]
        severity = sys.argv[4] if len(sys.argv) > 4 else "medium"
        send_error_notification(error_type, error_details, severity)
    
    elif notification_type == "backup":
        if len(sys.argv) < 4:
            print("–î–ª—è backup –Ω—É–∂–Ω—ã: status –∏ details")
            sys.exit(1)
        status = sys.argv[2]
        details = sys.argv[3] if len(sys.argv) > 3 else ""
        send_backup_notification("manual", status, details)
    
    else:
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_type}")
        sys.exit(1)


if __name__ == '__main__':
    main()
