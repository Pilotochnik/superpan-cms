#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ª–∏–Ω—Ç–µ—Ä—ã, —Ç–µ—Å—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import os
import sys
import subprocess
import argparse
from pathlib import Path


def run_command(command, description):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\nüîç {description}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    print("-" * 50)
    
    try:
        result = subprocess.run(
            command, 
            shell=True, 
            capture_output=True, 
            text=True,
            cwd=Path(__file__).parent.parent
        )
        
        if result.stdout:
            print(result.stdout)
        
        if result.stderr:
            print("STDERR:", result.stderr)
        
        if result.returncode == 0:
            print(f"‚úÖ {description} - –£–°–ü–ï–®–ù–û")
            return True
        else:
            print(f"‚ùå {description} - –û–®–ò–ë–ö–ê (–∫–æ–¥: {result.returncode})")
            return False
            
    except Exception as e:
        print(f"‚ùå {description} - –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
        return False


def check_black():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ —Å Black"""
    return run_command("black --check .", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ (Black)")


def check_isort():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ —Å isort"""
    return run_command("isort --check-only .", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ (isort)")


def check_flake8():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–¥–∞ —Å flake8"""
    return run_command("flake8 .", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–¥–∞ (flake8)")


def check_bandit():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å bandit"""
    return run_command("bandit -r . -f json", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (bandit)")


def run_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"""
    return run_command("pytest --cov=. --cov-report=term-missing", "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ (pytest)")


def run_migrations_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π"""
    return run_command("python manage.py makemigrations --check", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ SuperPan")
    parser.add_argument(
        '--fix', 
        action='store_true', 
        help='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'
    )
    parser.add_argument(
        '--skip-tests', 
        action='store_true', 
        help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã'
    )
    parser.add_argument(
        '--only-format', 
        action='store_true', 
        help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
    )
    
    args = parser.parse_args()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ SuperPan")
    print("=" * 60)
    
    results = []
    
    if args.fix:
        print("\nüîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        run_command("black .", "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (Black)")
        run_command("isort .", "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ (isort)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    results.append(check_black())
    results.append(check_isort())
    
    if args.only_format:
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        passed = sum(results)
        total = len(results)
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
        
        if passed == total:
            print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω—ã!")
            return 0
        else:
            print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã!")
            return 1
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
    results.append(check_flake8())
    results.append(check_bandit())
    results.append(run_migrations_check())
    
    # –¢–µ—Å—Ç—ã
    if not args.skip_tests:
        results.append(run_tests())
    else:
        print("\n‚è≠Ô∏è –¢–µ—Å—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    
    passed = sum(results)
    total = len(results)
    
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {total - passed}/{total}")
    
    if passed == total:
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üöÄ –ö–æ–¥ –≥–æ—Ç–æ–≤ –∫ –∫–æ–º–º–∏—Ç—É –∏ –¥–µ–ø–ª–æ—é!")
        return 0
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º")
        return 1


if __name__ == '__main__':
    sys.exit(main())
