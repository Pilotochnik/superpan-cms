from django.core.management.base import BaseCommand
from django.utils.translation import gettext_lazy as _
from kanban.task_models import TaskCategory, TaskPriority, TaskStatus


class Command(BaseCommand):
    help = '–ó–∞–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–¥–∞—á'

    def handle(self, *args, **options):
        self.stdout.write('üìã –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–¥–∞—á...')
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á
        self.create_task_categories()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
        self.create_task_priorities()
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
        self.create_task_statuses()
        
        self.stdout.write(
            self.style.SUCCESS('‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!')
        )

    def create_task_categories(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á"""
        categories_data = [
            ('–ó–∞–∫—É–ø–∫–∏', '–ó–∞–∫—É–ø–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è', '#28a745', 'bi-cart'),
            ('–†–∞–±–æ—Ç—ã', '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –º–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã', '#007bff', 'bi-hammer'),
            ('–ü–æ—Å—Ç–∞–≤–∫–∏', '–î–æ—Å—Ç–∞–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤', '#ffc107', 'bi-truck'),
            ('–ö–æ–Ω—Ç—Ä–æ–ª—å', '–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø—Ä–∏–µ–º–∫–∞', '#dc3545', 'bi-check-circle'),
            ('–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', '–í–µ–¥–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏', '#6c757d', 'bi-file-text'),
            ('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è', '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Ä–∞–±–æ—Ç', '#17a2b8', 'bi-people'),
            ('–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', '#fd7e14', 'bi-shield-check'),
            ('–ü—Ä–æ—á–µ–µ', '–ü—Ä–æ—á–∏–µ –∑–∞–¥–∞—á–∏', '#6f42c1', 'bi-three-dots'),
        ]
        
        for name, description, color, icon in categories_data:
            category, created = TaskCategory.objects.get_or_create(
                name=name,
                defaults={
                    'description': description,
                    'color': color,
                    'icon': icon,
                    'is_active': True
                }
            )
            if created:
                self.stdout.write(f'  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {name}')
            else:
                self.stdout.write(f'  ‚ÑπÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {name}')

    def create_task_priorities(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á"""
        priorities_data = [
            ('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π', 1, '#dc3545', 'bi-exclamation-triangle-fill'),
            ('–í—ã—Å–æ–∫–∏–π', 2, '#fd7e14', 'bi-arrow-up-circle-fill'),
            ('–°—Ä–µ–¥–Ω–∏–π', 3, '#ffc107', 'bi-dash-circle-fill'),
            ('–ù–∏–∑–∫–∏–π', 4, '#28a745', 'bi-arrow-down-circle-fill'),
            ('–û–±—ã—á–Ω—ã–π', 5, '#6c757d', 'bi-circle'),
        ]
        
        for name, level, color, icon in priorities_data:
            priority, created = TaskPriority.objects.get_or_create(
                name=name,
                defaults={
                    'level': level,
                    'color': color,
                    'icon': icon,
                    'is_active': True
                }
            )
            if created:
                self.stdout.write(f'  ‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {name}')
            else:
                self.stdout.write(f'  ‚ÑπÔ∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {name}')

    def create_task_statuses(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á"""
        statuses_data = [
            ('–ù–æ–≤–∞—è', '–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç–∞', '#6c757d', 'bi-circle', False, 1),
            ('–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é', '–ó–∞–¥–∞—á–∞ –≥–æ—Ç–æ–≤–∞ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é', '#17a2b8', 'bi-play-circle', False, 2),
            ('–í —Ä–∞–±–æ—Ç–µ', '–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', '#007bff', 'bi-arrow-clockwise', False, 3),
            ('–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ', '–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏', '#ffc107', 'bi-eye', False, 4),
            ('–í—ã–ø–æ–ª–Ω–µ–Ω–∞', '–ó–∞–¥–∞—á–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∞', '#28a745', 'bi-check-circle-fill', True, 5),
            ('–û—Ç–ª–æ–∂–µ–Ω–∞', '–ó–∞–¥–∞—á–∞ –æ—Ç–ª–æ–∂–µ–Ω–∞', '#6c757d', 'bi-pause-circle', False, 6),
            ('–û—Ç–º–µ–Ω–µ–Ω–∞', '–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', '#dc3545', 'bi-x-circle-fill', True, 7),
        ]
        
        for name, description, color, icon, is_final, order in statuses_data:
            status, created = TaskStatus.objects.get_or_create(
                name=name,
                defaults={
                    'description': description,
                    'color': color,
                    'icon': icon,
                    'is_final': is_final,
                    'is_active': True,
                    'order': order
                }
            )
            if created:
                self.stdout.write(f'  ‚úÖ –°–æ–∑–¥–∞–Ω —Å—Ç–∞—Ç—É—Å: {name}')
            else:
                self.stdout.write(f'  ‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {name}')
