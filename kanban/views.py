from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib import messages
from django.http import JsonResponse
from django.db.models import Sum, Count, Q
from django.views.decorators.http import require_http_methods
from django.views.generic import DetailView
from django.utils import timezone
from django_ratelimit.decorators import ratelimit
import logging
import json

from constants import MAX_JSON_SIZE, MAX_JSON_MOVE_SIZE

from .models import (
    KanbanBoard, KanbanColumn, ExpenseItem, ExpenseDocument, 
    ExpenseComment, ExpenseCommentAttachment, ExpenseHistory, ExpenseCategory,
    StatusChangeRequest
)
from .forms import ExpenseItemForm, ExpenseDocumentForm, ExpenseCommentForm, ExpenseCommentAttachmentForm
from projects.models import Project, ProjectActivity

logger = logging.getLogger(__name__)


def send_status_change_notification(expense_item, user, old_status, new_status):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
    try:
        from telegram_bot.bot import send_message_to_user
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ —Å Telegram ID
        from accounts.models import TelegramUser
        admins = expense_item.project.members.filter(
            user__role='admin',
            is_active=True,
            user__telegram_profile__isnull=False
        ).select_related('user', 'user__telegram_profile')
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
        status_choices = dict(ExpenseItem.Status.choices)
        old_status_display = status_choices.get(old_status, old_status)
        new_status_display = status_choices.get(new_status, new_status)
        
        from django.urls import reverse
        from django.conf import settings
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º localhost –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        base_url = getattr(settings, 'BASE_URL', 'http://127.0.0.1:8000')
        approval_url = f"{base_url}{reverse('kanban:approval_dashboard')}"
        
        message = (
            f"üîÑ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏</b>\n\n"
            f"üìã <b>–ó–∞–¥–∞—á–∞:</b> {expense_item.title}\n"
            f"üèóÔ∏è <b>–ü—Ä–æ–µ–∫—Ç:</b> {expense_item.project.name}\n"
            f"üë§ <b>–ó–∞–ø—Ä–æ—Å–∏–ª:</b> {user.get_full_name()}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {old_status_display} ‚Üí {new_status_display}\n\n"
            f"‚ö†Ô∏è <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</b>\n\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</b>\n"
            f"<a href='{approval_url}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é</a>"
        )
        
        for admin in admins:
            telegram_id = admin.user.get_telegram_id()
            if telegram_id:
                success = send_message_to_user(
                    telegram_id,
                    message
                )
                if success:
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin.user.get_full_name()} (ID: {telegram_id})")
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin.user.get_full_name()} (ID: {telegram_id})")
            else:
                logger.warning(f"–£ –∞–¥–º–∏–Ω–∞ {admin.user.get_full_name()} –Ω–µ—Ç Telegram ID")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")


@login_required
def approval_dashboard(request):
    """Dashboard –¥–ª—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤"""
    user = request.user
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å—ã
    pending_requests = StatusChangeRequest.objects.filter(
        status='pending'
    ).select_related(
        'expense_item__project',
        'expense_item__created_by',
        'requested_by'
    ).order_by('-created_at')
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user.is_superuser:
        accessible_projects = user.get_accessible_projects()
        pending_requests = pending_requests.filter(
            expense_item__project__in=accessible_projects
        )
    
    context = {
        'title': '–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤',
        'pending_requests': pending_requests,
    }
    
    return render(request, 'kanban/approval_dashboard.html', context)

@login_required
def kanban_board(request, project_id):
    """–ö–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    project = get_object_or_404(Project, pk=project_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É
    if not project.can_user_access(request.user):
        messages.error(request, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É.')
        return redirect('projects:dashboard')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫—É
    board, created = KanbanBoard.objects.get_or_create(
        project=project,
        defaults={'created_by': request.user}
    )
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏, –µ—Å–ª–∏ –¥–æ—Å–∫–∞ –±—ã–ª–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–∞
    if created:
        default_columns = [
            ('–ù–æ–≤—ã–µ', 'new', 0, '#f8f9fa'),
            ('–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é', 'todo', 1, '#e3f2fd'),
            ('–í —Ä–∞–±–æ—Ç–µ', 'in_progress', 2, '#fff3cd'),
            ('–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ', 'review', 3, '#d1edff'),
            ('–í—ã–ø–æ–ª–Ω–µ–Ω—ã', 'done', 4, '#d4edda'),
            ('–û—Ç–º–µ–Ω–µ–Ω—ã', 'cancelled', 5, '#f8d7da'),
        ]
        
        for name, column_type, position, color in default_columns:
            KanbanColumn.objects.create(
                board=board,
                name=name,
                column_type=column_type,
                position=position,
                color=color
            )
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –∏ —ç–ª–µ–º–µ–Ω—Ç—ã
    columns = board.columns.filter(is_active=True).prefetch_related(
        'items__created_by',
        'items__assigned_to',
        'items__category'
    )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á
    total_expenses = ExpenseItem.objects.filter(project=project).aggregate(
        total_count=Count('id'),
        completed_count=Count('id', filter=Q(status='done')),
        in_progress_count=Count('id', filter=Q(status='in_progress')),
        new_count=Count('id', filter=Q(status='new')),
        total_hours=Sum('estimated_hours'),
        completed_hours=Sum('estimated_hours', filter=Q(status='done')),
    )
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if total_expenses['total_count'] > 0:
        total_expenses['completion_percent'] = (total_expenses['completed_count'] / total_expenses['total_count']) * 100
    else:
        total_expenses['completion_percent'] = 0
    
    context = {
        'project': project,
        'board': board,
        'columns': columns,
        'categories': ExpenseCategory.objects.filter(is_active=True),
        'total_expenses': total_expenses,
        'can_manage': (
            request.user.is_admin_role() or
            project.created_by == request.user or
            project.foreman == request.user
        ),
        'can_add_expenses': (
            request.user.is_admin_role() or
            project.created_by == request.user or
            project.foreman == request.user or
            project.members.filter(
                user=request.user,
                can_add_expenses=True,
                is_active=True
            ).exists()
        )
    }
    
    return render(request, 'kanban/board.html', context)


@login_required
@ratelimit(key='user', rate='30/h', method='POST', block=True)
@require_http_methods(["POST"])
def create_expense_item(request, project_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞"""
    project = get_object_or_404(Project, pk=project_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤
    if not (
        request.user.is_admin_role() or
        project.created_by == request.user or
        project.foreman == request.user or
        project.members.filter(user=request.user, can_add_expenses=True, is_active=True).exists()
    ):
        return JsonResponse({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'}, status=403)
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ JSON
        if len(request.body) > MAX_JSON_SIZE:
            return JsonResponse({'error': '–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∑–∞–ø—Ä–æ—Å'}, status=400)
        
        data = json.loads(request.body)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['title', 'estimated_hours']
        for field in required_fields:
            if field not in data or not data[field]:
                return JsonResponse({'error': f'–ü–æ–ª–µ {field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'}, status=400)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫—É
        board = KanbanBoard.objects.get(project=project)
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É (–æ–±—ã—á–Ω–æ "–û–∂–∏–¥–∞–µ—Ç")
        column = board.columns.filter(is_active=True).first()
        if not column:
            return JsonResponse({'error': '–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞'}, status=400)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        expense_item = ExpenseItem.objects.create(
            project=project,
            column=column,
            title=data.get('title'),
            description=data.get('description', ''),
            task_type=data.get('task_type', 'other'),
            estimated_hours=Decimal(str(data.get('estimated_hours', 0))),
            priority=data.get('priority', 'medium'),
            created_by=request.user,
            category_id=data.get('category_id') if data.get('category_id') else None
        )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
        ExpenseHistory.objects.create(
            expense_item=expense_item,
            user=request.user,
            action='created',
            new_value=f"–°–æ–∑–¥–∞–Ω —ç–ª–µ–º–µ–Ω—Ç —Ä–∞—Å—Ö–æ–¥–∞ –Ω–∞ —Å—É–º–º—É {expense_item.amount} ‚ÇΩ"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
        ProjectActivity.objects.create(
            project=project,
            user=request.user,
            activity_type='expense_added',
            description=f'–î–æ–±–∞–≤–ª–µ–Ω —Ä–∞—Å—Ö–æ–¥ "{expense_item.title}" –Ω–∞ —Å—É–º–º—É {expense_item.amount} ‚ÇΩ'
        )
        
        return JsonResponse({
            'success': True,
            'item': {
                'id': str(expense_item.id),
                'title': expense_item.title,
                'description': expense_item.description,
                'amount': str(expense_item.amount),
                'task_type': expense_item.get_task_type_display(),
                'priority': expense_item.priority,
                'created_by': expense_item.created_by.get_full_name(),
                'created_at': expense_item.created_at.isoformat()
            }
        })
        
    except json.JSONDecodeError:
        return JsonResponse({'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'}, status=400)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞: {e}")
        return JsonResponse({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}, status=500)


@login_required
@ratelimit(key='user', rate='60/h', method='POST', block=True)
@require_http_methods(["POST"])
def move_expense_item(request):
    """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞ –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ JSON
        if len(request.body) > MAX_JSON_MOVE_SIZE:
            return JsonResponse({'error': '–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∑–∞–ø—Ä–æ—Å'}, status=400)
        
        data = json.loads(request.body)
        item_id = data.get('item_id')
        target_column_id = data.get('target_column_id')
        position = data.get('position', 0)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not item_id or not target_column_id:
            return JsonResponse({'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'}, status=400)
        
        expense_item = get_object_or_404(ExpenseItem, pk=item_id)
        target_column = get_object_or_404(KanbanColumn, pk=target_column_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É
        if not expense_item.project.can_user_access(request.user):
            return JsonResponse({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'}, status=403)
        
        old_column = expense_item.column
        old_status = expense_item.status
        new_status = target_column.column_type
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞–ø—Ä—è–º—É—é
        if expense_item.can_user_change_status(request.user):
            # –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞–ø—Ä—è–º—É—é
            expense_item.column = target_column
            expense_item.position = position
            expense_item.save()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
            ExpenseHistory.objects.create(
                expense_item=expense_item,
                user=request.user,
                action='moved',
                old_value=f"–ö–æ–ª–æ–Ω–∫–∞: {old_column.name}",
                new_value=f"–ö–æ–ª–æ–Ω–∫–∞: {target_column.name}",
                field_name='column'
            )
        else:
            # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞—é—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–∂–∏–¥–∞—é—â–∏–π –∑–∞–ø—Ä–æ—Å
            if expense_item.has_pending_status_change():
                return JsonResponse({
                    'error': '–£–∂–µ –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–π —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞'
                }, status=400)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            StatusChangeRequest.objects.create(
                expense_item=expense_item,
                requested_by=request.user,
                old_status=old_status,
                new_status=new_status,
                reason=data.get('reason', '')
            )
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏—é, –Ω–æ –Ω–µ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
            expense_item.position = position
            expense_item.save(update_fields=['position'])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –≤ Telegram
            send_status_change_notification(expense_item, request.user, old_status, new_status)
            
            return JsonResponse({
                'success': True,
                'message': '–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
                'requires_approval': True
            })
        
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ "–æ–¥–æ–±—Ä–µ–Ω–æ", —Å–æ–∑–¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if old_status != expense_item.status and expense_item.status == 'approved':
            expense_item.approved_by = request.user
            expense_item.approved_at = timezone.now()
            expense_item.save(update_fields=['approved_by', 'approved_at'])
            
            ProjectActivity.objects.create(
                project=expense_item.project,
                user=request.user,
                activity_type='expense_approved',
                description=f'–û–¥–æ–±—Ä–µ–Ω —Ä–∞—Å—Ö–æ–¥ "{expense_item.title}" –Ω–∞ —Å—É–º–º—É {expense_item.amount} ‚ÇΩ'
            )
        
        return JsonResponse({'success': True})
        
    except json.JSONDecodeError:
        return JsonResponse({'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'}, status=400)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
        return JsonResponse({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}, status=500)


class ExpenseItemDetailView(LoginRequiredMixin, DetailView):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –≤–∏–¥ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞"""
    model = ExpenseItem
    template_name = 'kanban/expense_detail.html'
    context_object_name = 'expense_item'
    
    def get_object(self):
        expense_item = get_object_or_404(ExpenseItem, pk=self.kwargs['pk'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É
        if not expense_item.project.can_user_access(self.request.user):
            raise PermissionError("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É")
        
        return expense_item
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        expense_item = self.object
        
        context['comments'] = expense_item.comments.select_related('author').order_by('created_at')
        context['documents'] = expense_item.documents.select_related('uploaded_by')
        context['history'] = expense_item.history.select_related('user')[:10]
        context['can_edit'] = (
            self.request.user.is_admin_role() or
            expense_item.created_by == self.request.user or
            expense_item.project.can_user_access(self.request.user)
        )
        
        return context


@login_required
def edit_expense_item(request, pk):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞"""
    expense_item = get_object_or_404(ExpenseItem, pk=pk)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if not (request.user.is_admin_role() or 
            expense_item.created_by == request.user or
            expense_item.project.can_user_access(request.user)):
        messages.error(request, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.')
        return redirect('kanban:expense_detail', pk=pk)
    
    if request.method == 'POST':
        form = ExpenseItemForm(request.POST, instance=expense_item)
        if form.is_valid():
            old_amount = expense_item.amount
            expense_item = form.save()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—É–º–º—ã
            if old_amount != expense_item.amount:
                ExpenseHistory.objects.create(
                    expense_item=expense_item,
                    user=request.user,
                    action='updated',
                    old_value=f"–°—É–º–º–∞: {old_amount}",
                    new_value=f"–°—É–º–º–∞: {expense_item.amount}",
                    field_name='amount'
                )
            
            messages.success(request, '–≠–ª–µ–º–µ–Ω—Ç —Ä–∞—Å—Ö–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.')
            return redirect('kanban:expense_detail', pk=pk)
    else:
        form = ExpenseItemForm(instance=expense_item)
    
    return render(request, 'kanban/expense_form.html', {
        'form': form,
        'expense_item': expense_item,
        'title': f'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å "{expense_item.title}"'
    })


@login_required
@require_http_methods(["POST"])
def add_expense_comment(request, pk):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —ç–ª–µ–º–µ–Ω—Ç—É —Ä–∞—Å—Ö–æ–¥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∞–π–ª–æ–≤"""
    expense_item = get_object_or_404(ExpenseItem, pk=pk)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É
    if not expense_item.project.can_user_access(request.user):
        return JsonResponse({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'}, status=403)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –≤ –∑–∞–ø—Ä–æ—Å–µ
        if 'attachments' in request.FILES:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã —Å —Ñ–∞–π–ª–æ–º
            form = ExpenseCommentForm(request.POST, request.FILES)
            if form.is_valid():
                comment = form.save(commit=False)
                comment.expense_item = expense_item
                comment.author = request.user
                comment.save()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                attachment_file = form.cleaned_data.get('attachments')
                if attachment_file:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
                    file_name = attachment_file.name.lower()
                    if any(file_name.endswith(ext) for ext in ['.jpg', '.jpeg', '.png', '.gif']):
                        file_type = 'image'
                    elif any(file_name.endswith(ext) for ext in ['.mp4', '.avi', '.mov', '.mkv']):
                        file_type = 'video'
                    elif any(file_name.endswith(ext) for ext in ['.pdf', '.doc', '.docx', '.xls', '.xlsx']):
                        file_type = 'document'
                    else:
                        file_type = 'other'
                    
                    ExpenseCommentAttachment.objects.create(
                        comment=comment,
                        file=attachment_file,
                        file_name=attachment_file.name,
                        file_type=file_type,
                        uploaded_by=request.user
                    )
                
                return JsonResponse({
                    'success': True,
                    'comment': {
                        'id': comment.id,
                        'text': comment.text,
                        'author': comment.author.get_full_name(),
                        'created_at': comment.created_at.isoformat(),
                        'is_internal': comment.is_internal,
                        'has_attachments': comment.attachments.exists()
                    }
                })
            else:
                return JsonResponse({'error': '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã', 'errors': form.errors}, status=400)
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ —Ñ–∞–π–ª–æ–≤
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
            content_type = request.content_type
            if content_type and 'application/json' in content_type:
                data = json.loads(request.body)
                text = data.get('text', '').strip()
                is_internal = data.get('is_internal', False)
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ä–º–∞ –±–µ–∑ —Ñ–∞–π–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º POST –¥–∞–Ω–Ω—ã–µ
                text = request.POST.get('text', '').strip()
                is_internal = request.POST.get('is_internal', False) == 'true'
            
            if not text:
                return JsonResponse({'error': '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}, status=400)
            
            comment = ExpenseComment.objects.create(
                expense_item=expense_item,
                author=request.user,
                text=text,
                is_internal=is_internal
            )
            
            return JsonResponse({
                'success': True,
                'comment': {
                    'id': comment.id,
                    'text': comment.text,
                    'author': comment.author.get_full_name(),
                    'created_at': comment.created_at.isoformat(),
                    'is_internal': comment.is_internal
                }
            })
        
    except json.JSONDecodeError:
        return JsonResponse({'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'}, status=400)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        return JsonResponse({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}, status=500)


@login_required
@require_http_methods(["POST"])
def reject_expense_item(request, pk):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞"""
    expense_item = get_object_or_404(ExpenseItem, pk=pk)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –º–æ–≥—É—Ç –æ—Ç–∫–ª–æ–Ω—è—Ç—å)
    if not (request.user.is_admin_role() or 
            expense_item.project.created_by == request.user or
            expense_item.project.foreman == request.user):
        return JsonResponse({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'}, status=403)
    
    try:
        data = json.loads(request.body)
        reason = data.get('reason', '').strip()
        
        if not reason:
            return JsonResponse({'error': '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è'}, status=400)
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∫–æ–ª–æ–Ω–∫—É "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
        rejected_column = expense_item.project.kanban_board.columns.filter(
            column_type='rejected'
        ).first()
        
        if rejected_column:
            expense_item.column = rejected_column
            expense_item.rejection_reason = reason
            expense_item.save()
            
            # –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            ProjectActivity.objects.create(
                project=expense_item.project,
                user=request.user,
                activity_type='expense_rejected',
                description=f'–û—Ç–∫–ª–æ–Ω–µ–Ω —Ä–∞—Å—Ö–æ–¥ "{expense_item.title}" –Ω–∞ —Å—É–º–º—É {expense_item.amount} ‚ÇΩ'
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –ø—Ä–∏—á–∏–Ω–æ–π –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            ExpenseComment.objects.create(
                expense_item=expense_item,
                author=request.user,
                text=f"–†–∞—Å—Ö–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}",
                is_internal=True
            )
            
            return JsonResponse({'success': True})
        else:
            return JsonResponse({'error': '–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤'}, status=500)
        
    except json.JSONDecodeError:
        return JsonResponse({'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'}, status=400)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
        return JsonResponse({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}, status=500)


@login_required
def expense_analytics(request, project_id):
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    project = get_object_or_404(Project, pk=project_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É
    if not project.can_user_access(request.user):
        messages.error(request, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É.')
        return redirect('projects:dashboard')
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    expenses_by_type = ExpenseItem.objects.filter(project=project).values(
        'task_type'
    ).annotate(
        total_amount=Sum('amount'),
        count=Count('id')
    ).order_by('-total_amount')
    
    expenses_by_status = ExpenseItem.objects.filter(project=project).values(
        'status'
    ).annotate(
        total_amount=Sum('amount'),
        count=Count('id')
    )
    
    expenses_by_category = ExpenseItem.objects.filter(
        project=project,
        category__isnull=False
    ).values(
        'category__name',
        'category__color'
    ).annotate(
        total_amount=Sum('amount'),
        count=Count('id')
    ).order_by('-total_amount')
    
    context = {
        'project': project,
        'expenses_by_type': expenses_by_type,
        'expenses_by_status': expenses_by_status,
        'expenses_by_category': expenses_by_category,
        'total_budget': project.budget,
        'total_spent': project.spent_amount,
        'remaining_budget': project.remaining_budget
    }
    
    return render(request, 'kanban/analytics.html', context)


@login_required
@require_http_methods(["POST"])
def add_expense(request):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        project_id = request.POST.get('project_id')
        if not project_id:
            return JsonResponse({'error': '–ù–µ —É–∫–∞–∑–∞–Ω –ø—Ä–æ–µ–∫—Ç'}, status=400)
        
        project = get_object_or_404(Project, pk=project_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É
        if not project.can_user_access(request.user):
            return JsonResponse({'error': '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É'}, status=403)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤
        can_add = (
            request.user.is_admin_role() or
            project.created_by == request.user or
            project.foreman == request.user or
            request.user.role == 'contractor'
        )
        
        if not can_add:
            return JsonResponse({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤'}, status=403)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        title = request.POST.get('title', '').strip()
        description = request.POST.get('description', '').strip()
        task_type = request.POST.get('task_type', 'other')
        amount = request.POST.get('amount', '0')
        priority = request.POST.get('priority', 'medium')
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not title:
            return JsonResponse({'error': '–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'}, status=400)
        
        try:
            amount = Decimal(amount)
            if amount <= 0:
                return JsonResponse({'error': '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0'}, status=400)
        except (ValueError, TypeError):
            return JsonResponse({'error': '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞'}, status=400)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫—É
        board, created = KanbanBoard.objects.get_or_create(
            project=project,
            defaults={'created_by': request.user}
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–æ–Ω–∫—É "–û–∂–∏–¥–∞–µ—Ç"
        column = board.columns.filter(column_type='pending').first()
        if not column:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            column = KanbanColumn.objects.create(
                board=board,
                name='–û–∂–∏–¥–∞–µ—Ç',
                column_type='pending',
                position=0
            )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        expense = ExpenseItem.objects.create(
            project=project,
            column=column,
            title=title,
            description=description,
            task_type=task_type,
            estimated_hours=amount,
            priority=priority,
            created_by=request.user
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        if 'receipt_file' in request.FILES:
            expense.receipt_file = request.FILES['receipt_file']
        
        if 'photo_files' in request.FILES:
            expense.photo_files = request.FILES['photo_files']
        
        expense.save()
        
        # –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        ProjectActivity.objects.create(
            project=project,
            user=request.user,
            activity_type='expense_added',
            description=f'–î–æ–±–∞–≤–ª–µ–Ω —Ä–∞—Å—Ö–æ–¥: {title} –Ω–∞ —Å—É–º–º—É {amount} ‚ÇΩ'
        )
        
        return JsonResponse({
            'success': True,
            'message': '–†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω',
            'expense_id': str(expense.id)
        })
        
    except Exception as e:
        logger.error(f"Error adding expense: {e}")
        return JsonResponse({'error': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}, status=500)


@login_required
@require_http_methods(["POST"])
def approve_status_change(request, request_id):
    """–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
    try:
        status_request = get_object_or_404(StatusChangeRequest, pk=request_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
        if not request.user.is_admin_role():
            return JsonResponse({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'}, status=403)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        if not status_request.is_pending:
            return JsonResponse({'error': '–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω'}, status=400)
        
        # –£—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
        status_request.status = StatusChangeRequest.Status.APPROVED
        status_request.approved_by = request.user
        status_request.approved_at = timezone.now()
        status_request.save()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        expense_item = status_request.expense_item
        old_status = expense_item.status
        expense_item.status = status_request.new_status
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        board = expense_item.project.kanban_board
        new_column = board.columns.filter(column_type=status_request.new_status).first()
        if new_column:
            expense_item.column = new_column
        
        expense_item.save()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
        ExpenseHistory.objects.create(
            expense_item=expense_item,
            user=request.user,
            action='status_approved',
            old_value=f"–°—Ç–∞—Ç—É—Å: {status_request.get_old_status_display()}",
            new_value=f"–°—Ç–∞—Ç—É—Å: {status_request.get_new_status_display()}",
            field_name='status'
        )
        
        return JsonResponse({
            'success': True,
            'message': '–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω'
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return JsonResponse({'error': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}, status=500)


@login_required
@require_http_methods(["POST"])
def reject_status_change(request, request_id):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
    try:
        data = json.loads(request.body)
        rejection_reason = data.get('reason', '').strip()
        
        status_request = get_object_or_404(StatusChangeRequest, pk=request_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
        if not request.user.is_admin_role():
            return JsonResponse({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'}, status=403)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        if not status_request.is_pending:
            return JsonResponse({'error': '–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω'}, status=400)
        
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        status_request.status = StatusChangeRequest.Status.REJECTED
        status_request.approved_by = request.user
        status_request.approved_at = timezone.now()
        status_request.rejection_reason = rejection_reason
        status_request.save()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
        ExpenseHistory.objects.create(
            expense_item=status_request.expense_item,
            user=request.user,
            action='status_rejected',
            old_value=f"–°—Ç–∞—Ç—É—Å: {status_request.get_new_status_display()}",
            new_value="–û—Ç–∫–ª–æ–Ω–µ–Ω–æ",
            field_name='status'
        )
        
        return JsonResponse({
            'success': True,
            'message': '–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω'
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return JsonResponse({'error': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}, status=500)


@login_required
def pending_status_changes(request):
    """–°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞"""
    if not request.user.is_admin_role():
        return JsonResponse({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'}, status=403)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
    pending_requests = StatusChangeRequest.objects.filter(
        status=StatusChangeRequest.Status.PENDING
    ).select_related(
        'expense_item', 'requested_by', 'expense_item__project'
    ).order_by('-created_at')
    
    requests_data = []
    for req in pending_requests:
        requests_data.append({
            'id': req.id,
            'task_title': req.expense_item.title,
            'project_name': req.expense_item.project.name,
            'requested_by': req.requested_by.get_full_name(),
            'old_status': req.get_old_status_display(),
            'new_status': req.get_new_status_display(),
            'reason': req.reason,
            'created_at': req.created_at.isoformat()
        })
    
    return JsonResponse({
        'success': True,
        'requests': requests_data
    })


@login_required
@require_http_methods(["POST"])
def approve_status_change_request(request, item_id):
    """–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
        status_request = StatusChangeRequest.objects.filter(
            expense_item_id=item_id,
            status=StatusChangeRequest.Status.PENDING
        ).first()
        
        if not status_request:
            return JsonResponse({'error': '–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=404)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
        if not request.user.is_admin_role():
            return JsonResponse({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'}, status=403)
        
        # –£—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
        status_request.status = StatusChangeRequest.Status.APPROVED
        status_request.approved_by = request.user
        status_request.approved_at = timezone.now()
        status_request.save()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–ª–æ–Ω–∫—É
        expense_item = status_request.expense_item
        expense_item.status = status_request.new_status
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        new_column = KanbanColumn.objects.filter(
            board__project=expense_item.project,
            column_type=status_request.new_status
        ).first()
        
        if new_column:
            expense_item.column = new_column
        else:
            # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –µ—ë –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
            logger.warning(f"–ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ {status_request.new_status} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ {expense_item.project.id}")
        
        expense_item.save()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
        ExpenseHistory.objects.create(
            expense_item=expense_item,
            user=request.user,
            action='status_approved',
            old_value=f"–°—Ç–∞—Ç—É—Å: {status_request.get_old_status_display()}",
            new_value=f"–°—Ç–∞—Ç—É—Å: {status_request.get_new_status_display()}",
            field_name='status'
        )
        
        return JsonResponse({
            'success': True,
            'message': f'–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ "{expense_item.title}" —É—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "{status_request.get_new_status_display()}"'
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return JsonResponse({'error': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}, status=500)


@login_required
@require_http_methods(["POST"])
def reject_status_change_request(request, item_id):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
    try:
        data = json.loads(request.body)
        rejection_reason = data.get('reason', '').strip()
        
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
        status_request = StatusChangeRequest.objects.filter(
            expense_item_id=item_id,
            status=StatusChangeRequest.Status.PENDING
        ).first()
        
        if not status_request:
            return JsonResponse({'error': '–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=404)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
        if not request.user.is_admin_role():
            return JsonResponse({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'}, status=403)
        
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        status_request.status = StatusChangeRequest.Status.REJECTED
        status_request.approved_by = request.user
        status_request.approved_at = timezone.now()
        status_request.rejection_reason = rejection_reason
        status_request.save()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
        ExpenseHistory.objects.create(
            expense_item=status_request.expense_item,
            user=request.user,
            action='status_rejected',
            old_value=f"–°—Ç–∞—Ç—É—Å: {status_request.get_old_status_display()}",
            new_value=f"–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω: {status_request.get_new_status_display()}",
            field_name='status'
        )
        
        return JsonResponse({
            'success': True,
            'message': f'–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ "{status_request.expense_item.title}" –æ—Ç–∫–ª–æ–Ω–µ–Ω'
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return JsonResponse({'error': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}, status=500)