from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from django.db import IntegrityError, transaction
from decimal import Decimal
import uuid

User = get_user_model()


class Command(BaseCommand):
    help = '–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã "–ü—Ä–æ–µ–∫—Ç–Ω—ã–π –û—Ñ–∏—Å"'

    def add_arguments(self, parser):
        parser.add_argument(
            '--clear',
            action='store_true',
            help='–û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö',
        )

    def handle(self, *args, **options):
        self.stdout.write('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è "–ü—Ä–æ–µ–∫—Ç–Ω—ã–π –û—Ñ–∏—Å"...')
        
        if options['clear']:
            self.clear_demo_data()
        
        try:
            with transaction.atomic():
                self.create_users()
                self.create_categories()
                self.create_projects()
                self.create_access_keys()
                self.create_expenses()
                
            self.stdout.write(
                self.style.SUCCESS('üéâ –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!')
            )
            self.print_credentials()
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö: {e}')
            )

    def clear_demo_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö"""
        self.stdout.write('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...')
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫—Ä–æ–º–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        User.objects.exclude(is_superuser=True).delete()
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        from projects.models import Project
        from kanban.models import ExpenseCategory, ExpenseItem
        from accounts.models import ProjectAccessKey
        
        ExpenseItem.objects.all().delete()
        ProjectAccessKey.objects.all().delete()
        Project.objects.all().delete()
        ExpenseCategory.objects.all().delete()
        
        self.stdout.write('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã')

    def create_users(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        self.stdout.write('üë• –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ä–∞–±–∞
        self.foreman = User.objects.create_user(
            email='foreman@project-office.ru',
            password='foreman123',
            first_name='–ò–≤–∞–Ω',
            last_name='–ü—Ä–æ—Ä–∞–±–æ–≤',
            role='foreman'
        )
        self.stdout.write('‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ä–∞–±: foreman@project-office.ru / foreman123')
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
        self.contractors = []
        contractor_data = [
            ('contractor1@project-office.ru', '–ü–µ—Ç—Ä', '–°—Ç—Ä–æ–∏—Ç–µ–ª–µ–≤'),
            ('contractor2@project-office.ru', '–°–µ—Ä–≥–µ–π', '–≠–ª–µ–∫—Ç—Ä–∏–∫–æ–≤'),
            ('contractor3@project-office.ru', '–ú–∏—Ö–∞–∏–ª', '–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–æ–≤'),
        ]
        
        for email, first_name, last_name in contractor_data:
            contractor = User.objects.create_user(
                email=email,
                password='contractor123',
                first_name=first_name,
                last_name=last_name,
                role='contractor'
            )
            self.contractors.append(contractor)
            self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–¥—Ä—è–¥—á–∏–∫: {email} / contractor123')

    def create_categories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        self.stdout.write('üìÇ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤...')
        
        from kanban.models import ExpenseCategory
        
        categories_data = [
            ('–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', '–¶–µ–º–µ–Ω—Ç, –∫–∏—Ä–ø–∏—á, –∞—Ä–º–∞—Ç—É—Ä–∞', '#e74c3c'),
            ('–≠–ª–µ–∫—Ç—Ä–∏–∫–∞', '–ü—Ä–æ–≤–æ–¥–∞, —Ä–æ–∑–µ—Ç–∫–∏, –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–∏', '#f39c12'),
            ('–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞', '–¢—Ä—É–±—ã, –∫—Ä–∞–Ω—ã, —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞', '#3498db'),
            ('–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', '#9b59b6'),
            ('–¢–æ–ø–ª–∏–≤–æ', '–ë–µ–Ω–∑–∏–Ω, –¥–∏–∑–µ–ª—å –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏', '#e67e22'),
        ]
        
        self.categories = []
        for name, description, color in categories_data:
            category = ExpenseCategory.objects.create(
                name=name,
                description=description,
                color=color,
                is_active=True
            )
            self.categories.append(category)
            self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {name}')

    def create_projects(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        self.stdout.write('üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤...')
        
        from projects.models import Project
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        superuser = User.objects.filter(is_superuser=True).first()
        
        self.project = Project.objects.create(
            name='–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∂–∏–ª–æ–≥–æ –¥–æ–º–∞',
            description='–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –¥–≤—É—Ö—ç—Ç–∞–∂–Ω–æ–≥–æ –∂–∏–ª–æ–≥–æ –¥–æ–º–∞ –ø–ª–æ—â–∞–¥—å—é 200 –∫–≤.–º.',
            budget=Decimal('1000000.00'),
            status='active',
            address='–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è, –¥. 15',
            created_by=superuser or self.foreman,
            foreman=self.foreman
        )
        self.stdout.write('‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç: –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∂–∏–ª–æ–≥–æ –¥–æ–º–∞')

    def create_access_keys(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞"""
        self.stdout.write('üîë –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞...')
        
        from accounts.models import ProjectAccessKey
        
        superuser = User.objects.filter(is_superuser=True).first()
        
        for contractor in self.contractors:
            access_key = ProjectAccessKey.objects.create(
                project_id=self.project.id,
                assigned_to=contractor,
                created_by=superuser or self.foreman,
                is_active=True,
                description=f'–î–æ—Å—Ç—É–ø –¥–ª—è {contractor.get_full_name()}'
            )
            self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è {contractor.get_full_name()}')

    def create_expenses(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏"""
        self.stdout.write('üí∞ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤...')
        
        from kanban.models import KanbanBoard, KanbanColumn, ExpenseItem
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫—É
        board = KanbanBoard.objects.create(
            project=self.project,
            created_by=self.foreman
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        columns_data = [
            ('–û–∂–∏–¥–∞–µ—Ç', 'pending', 0, '#f8f9fa'),
            ('–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏', 'in_review', 1, '#fff3cd'),
            ('–û–¥–æ–±—Ä–µ–Ω–æ', 'approved', 2, '#d1edff'),
            ('–û—Ç–∫–ª–æ–Ω–µ–Ω–æ', 'rejected', 3, '#f8d7da'),
            ('–û–ø–ª–∞—á–µ–Ω–æ', 'paid', 4, '#d4edda'),
        ]
        
        columns = []
        for name, column_type, position, color in columns_data:
            column = KanbanColumn.objects.create(
                board=board,
                name=name,
                column_type=column_type,
                position=position,
                color=color
            )
            columns.append(column)
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—Ä–∞—Å—Ö–æ–¥—ã
        expenses_data = [
            ('–ó–∞–∫—É–ø–∫–∞ —Ü–µ–º–µ–Ω—Ç–∞', '–¶–µ–º–µ–Ω—Ç –ú400, 50 –º–µ—à–∫–æ–≤', 'material', Decimal('25000.00'), 'high', self.categories[0], self.contractors[0], 1),
            ('–≠–ª–µ–∫—Ç—Ä–æ–ø—Ä–æ–≤–æ–¥–∫–∞ 1 —ç—Ç–∞–∂', '–ú–æ–Ω—Ç–∞–∂ —ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–æ–≤–æ–¥–∫–∏ –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–∂–∞', 'labor', Decimal('45000.00'), 'medium', self.categories[1], self.contractors[1], 2),
            ('–°–∞–Ω—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä—É–±—ã', '–¢—Ä—É–±—ã –¥–ª—è –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è –∏ –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏–∏', 'material', Decimal('18000.00'), 'medium', self.categories[2], self.contractors[2], 0),
            ('–¢–æ–ø–ª–∏–≤–æ –¥–ª—è —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä–∞', '–î–∏–∑–µ–ª—å–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ –¥–ª—è –∑–µ–º–ª—è–Ω—ã—Ö —Ä–∞–±–æ—Ç', 'fuel', Decimal('8500.00'), 'low', self.categories[4], self.contractors[0], 4),
            ('–ê—Ä–µ–Ω–¥–∞ –±–µ—Ç–æ–Ω–æ–º–µ—à–∞–ª–∫–∏', '–ê—Ä–µ–Ω–¥–∞ –±–µ—Ç–æ–Ω–æ–º–µ—à–∞–ª–∫–∏ –Ω–∞ 5 –¥–Ω–µ–π', 'equipment', Decimal('12000.00'), 'medium', self.categories[3], self.contractors[1], 0),
            ('–ö–∏—Ä–ø–∏—á –æ–±–ª–∏—Ü–æ–≤–æ—á–Ω—ã–π', '–ö–∏—Ä–ø–∏—á –¥–ª—è –æ–±–ª–∏—Ü–æ–≤–∫–∏ —Ñ–∞—Å–∞–¥–∞', 'material', Decimal('65000.00'), 'high', self.categories[0], self.contractors[2], 1),
        ]
        
        for title, description, task_type, amount, priority, category, created_by, column_idx in expenses_data:
            expense = ExpenseItem.objects.create(
                project=self.project,
                column=columns[column_idx],
                title=title,
                description=description,
                task_type=task_type,
                amount=amount,
                priority=priority,
                category=category,
                created_by=created_by,
                position=0
            )
            self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω —Ä–∞—Å—Ö–æ–¥: {title}')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—É—é —Å—É–º–º—É –ø—Ä–æ–µ–∫—Ç–∞
        self.project.update_spent_amount()
        
        self.stdout.write('‚úÖ –ö–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞')

    def print_credentials(self):
        """–í—ã–≤–æ–¥ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.stdout.write('')
        self.stdout.write(self.style.SUCCESS('üéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!'))
        self.stdout.write('')
        self.stdout.write('üë• –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:')
        self.stdout.write(f'   üîë –ü—Ä–æ—Ä–∞–±: foreman@project-office.ru / foreman123')
        for i, contractor in enumerate(self.contractors, 1):
            self.stdout.write(f'   üë∑ –ü–æ–¥—Ä—è–¥—á–∏–∫ {i}: {contractor.email} / contractor123')
        self.stdout.write('')
        self.stdout.write('üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:')
        self.stdout.write('   üìä –ì–ª–∞–≤–Ω–∞—è: http://127.0.0.1:8000/')
        self.stdout.write('   üèóÔ∏è –ü—Ä–æ–µ–∫—Ç—ã: http://127.0.0.1:8000/projects/')
        self.stdout.write('   üìã –ö–∞–Ω–±–∞–Ω: http://127.0.0.1:8000/kanban/board/{project_id}/')
        self.stdout.write('   ‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞: http://127.0.0.1:8000/management/')
        self.stdout.write('')
        self.stdout.write('üìà –î–µ–º–æ-–ø—Ä–æ–µ–∫—Ç:')
        self.stdout.write(f'   üìÅ {self.project.name}')
        self.stdout.write(f'   üí∞ –ë—é–¥–∂–µ—Ç: {self.project.budget:,.0f} ‚ÇΩ')
        self.stdout.write(f'   üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {self.project.spent_amount:,.0f} ‚ÇΩ')
