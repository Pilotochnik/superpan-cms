"""
Django –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–æ–≥–¥–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è,
–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 3 –¥–Ω–µ–π
"""

from django.core.management.base import BaseCommand, CommandError
from django.conf import settings
from django.utils import timezone
import os
import json
from pathlib import Path
from datetime import datetime, timedelta


class Command(BaseCommand):
    help = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 –¥–Ω—è'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ—à–ª–æ 3 –¥–Ω—è'
        )
        parser.add_argument(
            '--days',
            type=int,
            default=3,
            help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –º–µ–∂–¥—É —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)'
        )
        parser.add_argument(
            '--check-only',
            action='store_true',
            help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–∞ –ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è, –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å'
        )
    
    def handle(self, *args, **options):
        force = options['force']
        days = options['days']
        check_only = options['check_only']
        
        if check_only:
            self.check_backup_needed(days)
        else:
            self.auto_backup(force, days)
    
    def check_backup_needed(self, days):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–∞ –ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è"""
        try:
            last_backup = self.get_last_backup()
            
            if not last_backup:
                self.stdout.write(
                    self.style.WARNING("–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –Ω—É–∂–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è")
                )
                return True
            
            last_backup_date = self.get_backup_date(last_backup)
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–±–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ç–∏–ø (aware –∏–ª–∏ naive)
            now = timezone.now()
            if last_backup_date.tzinfo is None:
                last_backup_date = timezone.make_aware(last_backup_date)
            elif now.tzinfo is None:
                now = timezone.make_aware(now)
            
            days_since_backup = (now - last_backup_date).days
            
            if days_since_backup >= days:
                self.stdout.write(
                    self.style.WARNING(f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±—ã–ª–∞ {days_since_backup} –¥–Ω–µ–π –Ω–∞–∑–∞–¥ - –Ω—É–∂–Ω–∞ –Ω–æ–≤–∞—è")
                )
                return True
            else:
                remaining_days = days - days_since_backup
                self.stdout.write(
                    self.style.SUCCESS(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞. –°–ª–µ–¥—É—é—â–∞—è —á–µ—Ä–µ–∑ {remaining_days} –¥–Ω–µ–π")
                )
                return False
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            )
            return True
    
    def auto_backup(self, force, days):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è
            if not force:
                if not self.check_backup_needed(days):
                    self.stdout.write("–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω—É–∂–Ω–∞")
                    return
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            self.stdout.write("–°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            from django.core.management import call_command
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            call_command('backup_db', 'create', '--description', 'auto_3days', '--auto')
            
            self.stdout.write(
                self.style.SUCCESS("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            )
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º 10)
            self.stdout.write("–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...")
            call_command('backup_db', 'cleanup', '--keep', '10', '--auto')
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.show_backup_stats()
            
        except Exception as e:
            raise CommandError(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    def get_last_backup(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"""
        try:
            backup_dir = Path('backups')
            if not backup_dir.exists():
                return None
            
            backup_files = list(backup_dir.glob("db_backup_*.sqlite3"))
            if not backup_files:
                return None
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            return max(backup_files, key=lambda x: x.stat().st_mtime)
            
        except Exception:
            return None
    
    def get_backup_date(self, backup_file):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            metadata_file = backup_file.with_suffix('.json')
            if metadata_file.exists():
                try:
                    with open(metadata_file, 'r', encoding='utf-8') as f:
                        metadata = json.load(f)
                    return datetime.fromisoformat(metadata['created_at'].replace('Z', '+00:00'))
                except (json.JSONDecodeError, KeyError, ValueError):
                    pass
            
            # –ï—Å–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
            return datetime.fromtimestamp(backup_file.stat().st_mtime, tz=timezone.utc)
            
        except Exception:
            # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            return timezone.now()
    
    def show_backup_stats(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
        try:
            backup_dir = Path('backups')
            if not backup_dir.exists():
                return
            
            backup_files = list(backup_dir.glob("db_backup_*.sqlite3"))
            total_size = sum(f.stat().st_size for f in backup_files)
            size_mb = total_size / (1024 * 1024)
            
            self.stdout.write(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:")
            self.stdout.write(f"   –í—Å–µ–≥–æ –∫–æ–ø–∏–π: {len(backup_files)}")
            self.stdout.write(f"   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {size_mb:.2f} MB")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∫–æ–ø–∏–∏
            if backup_files:
                sorted_files = sorted(backup_files, key=lambda x: x.stat().st_mtime, reverse=True)
                self.stdout.write(f"\nüìÅ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏:")
                for i, backup_file in enumerate(sorted_files[:3], 1):
                    stat = backup_file.stat()
                    size_mb = stat.st_size / (1024 * 1024)
                    date_str = datetime.fromtimestamp(stat.st_mtime).strftime('%Y-%m-%d %H:%M')
                    self.stdout.write(f"   {i}. {backup_file.name} ({size_mb:.2f} MB, {date_str})")
            
        except Exception as e:
            self.stdout.write(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def send_notification(self, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (email, Telegram, etc.)
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            self.stdout.write(f"üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {message}")
        except Exception as e:
            self.stdout.write(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
