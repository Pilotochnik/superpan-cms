#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–µ—Ä—Å–∏–π –¥–ª—è SuperPan
–ü–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞
"""

import os
import re
from datetime import datetime


def get_current_version():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ —Ñ–∞–π–ª–∞ VERSION"""
    try:
        with open('VERSION', 'r') as f:
            return f.read().strip()
    except FileNotFoundError:
        return "0.0.0"


def set_version(version):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é"""
    with open('VERSION', 'w') as f:
        f.write(version)
    print(f"‚úÖ –í–µ—Ä—Å–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {version}")


def bump_version(version_type='patch'):
    """
    –£–≤–µ–ª–∏—á–∏—Ç—å –≤–µ—Ä—Å–∏—é
    
    Args:
        version_type: 'major', 'minor', 'patch'
    """
    current = get_current_version()
    parts = current.split('.')
    
    if len(parts) != 3:
        raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏: {current}")
    
    major, minor, patch = map(int, parts)
    
    if version_type == 'major':
        major += 1
        minor = 0
        patch = 0
    elif version_type == 'minor':
        minor += 1
        patch = 0
    elif version_type == 'patch':
        patch += 1
    else:
        raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –≤–µ—Ä—Å–∏–∏: {version_type}")
    
    new_version = f"{major}.{minor}.{patch}"
    set_version(new_version)
    return new_version


def update_changelog(version, changelog_type='release'):
    """
    –û–±–Ω–æ–≤–∏—Ç—å CHANGELOG.md
    
    Args:
        version: –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è
        changelog_type: 'release' –∏–ª–∏ 'unreleased'
    """
    date = datetime.now().strftime("%Y-%m-%d")
    
    if changelog_type == 'release':
        entry = f"""## [{version}] - {date}

### –î–æ–±–∞–≤–ª–µ–Ω–æ
- –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è

### –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫

### –ò–∑–º–µ–Ω–µ–Ω–æ
- –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ

---
"""
    else:
        entry = f"""## [{version}] - {date}

### –î–æ–±–∞–≤–ª–µ–Ω–æ
- –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è

### –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫

### –ò–∑–º–µ–Ω–µ–Ω–æ
- –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ

"""
    
    try:
        with open('CHANGELOG.md', 'r', encoding='utf-8') as f:
            content = f.read()
    except FileNotFoundError:
        content = "# Changelog\n\n"
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    lines = content.split('\n')
    insert_index = 2  # –ü–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
    
    for i, line in enumerate(lines):
        if line.startswith('## ['):
            insert_index = i
            break
    
    lines.insert(insert_index, entry)
    
    with open('CHANGELOG.md', 'w', encoding='utf-8') as f:
        f.write('\n'.join(lines))
    
    print(f"‚úÖ CHANGELOG.md –æ–±–Ω–æ–≤–ª–µ–Ω")


def update_readme_version(version):
    """–û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é –≤ README.md"""
    try:
        with open('README.md', 'r', encoding='utf-8') as f:
            content = f.read()
    except FileNotFoundError:
        print("‚ùå README.md –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ó–∞–º–µ–Ω—è–µ–º –≤–µ—Ä—Å–∏—é –≤ README
    pattern = r'\*\*–í–µ—Ä—Å–∏—è:\*\* [0-9]+\.[0-9]+\.[0-9]+'
    replacement = f'**–í–µ—Ä—Å–∏—è:** {version}'
    new_content = re.sub(pattern, replacement, content)
    
    # –ó–∞–º–µ–Ω—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    today = datetime.now().strftime("%B %Y")
    pattern = r'\*\*–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:\*\* [A-Za-z]+ [0-9]{4}'
    replacement = f'**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {today}'
    new_content = re.sub(pattern, replacement, new_content)
    
    with open('README.md', 'w', encoding='utf-8') as f:
        f.write(new_content)
    
    print(f"‚úÖ README.md –æ–±–Ω–æ–≤–ª–µ–Ω")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python version_manager.py current          # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é")
        print("  python version_manager.py bump patch       # –£–≤–µ–ª–∏—á–∏—Ç—å patch –≤–µ—Ä—Å–∏—é")
        print("  python version_manager.py bump minor       # –£–≤–µ–ª–∏—á–∏—Ç—å minor –≤–µ—Ä—Å–∏—é")
        print("  python version_manager.py bump major       # –£–≤–µ–ª–∏—á–∏—Ç—å major –≤–µ—Ä—Å–∏—é")
        print("  python version_manager.py set 1.2.3        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é")
        print("  python version_manager.py release patch    # –°–æ–∑–¥–∞—Ç—å —Ä–µ–ª–∏–∑")
        return
    
    command = sys.argv[1]
    
    if command == 'current':
        version = get_current_version()
        print(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {version}")
    
    elif command == 'bump':
        if len(sys.argv) < 3:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –≤–µ—Ä—Å–∏–∏: patch, minor, major")
            return
        
        version_type = sys.argv[2]
        new_version = bump_version(version_type)
        print(f"üöÄ –í–µ—Ä—Å–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∞: {new_version}")
    
    elif command == 'set':
        if len(sys.argv) < 3:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä—Å–∏—é")
            return
        
        version = sys.argv[2]
        set_version(version)
    
    elif command == 'release':
        if len(sys.argv) < 3:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –≤–µ—Ä—Å–∏–∏: patch, minor, major")
            return
        
        version_type = sys.argv[2]
        new_version = bump_version(version_type)
        update_changelog(new_version, 'release')
        update_readme_version(new_version)
        print(f"üéâ –†–µ–ª–∏–∑ {new_version} —Å–æ–∑–¥–∞–Ω!")
        print("üìù –ù–µ –∑–∞–±—É–¥—å—Ç–µ:")
        print("  - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å CHANGELOG.md")
        print("  - –°–æ–∑–¥–∞—Ç—å git tag")
        print("  - –ó–∞–ø—É—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
    
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")


if __name__ == '__main__':
    main()
