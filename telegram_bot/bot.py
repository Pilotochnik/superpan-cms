import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from django.conf import settings
from asgiref.sync import sync_to_async

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç Django –º–æ–¥–µ–ª–µ–π
import django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'superpan.settings')
django.setup()

from accounts.models import TelegramUser, User, TelegramAuthToken
from projects.models import Project, ProjectMember
from kanban.models import ExpenseItem, ConstructionStage, ExpenseCategory


class ConstructionBot:
    """Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏"""
    
    def __init__(self):
        self.token = settings.TELEGRAM_BOT_TOKEN
        self.application = Application.builder().token(self.token).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("projects", self.projects_command))
        self.application.add_handler(CommandHandler("tasks", self.tasks_command))
        self.application.add_handler(CommandHandler("stages", self.stages_command))
        self.application.add_handler(CommandHandler("create_task", self.create_task_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
        self.application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo_message))
        self.application.add_handler(MessageHandler(filters.Document.ALL, self.handle_document_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def send_message(self, update, text, reply_markup=None):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if update.message:
            await update.message.reply_text(text, reply_markup=reply_markup)
        else:
            await update.callback_query.message.reply_text(text, reply_markup=reply_markup)
    
    async def send_message_to_user(self, user_id, text, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –µ–≥–æ Telegram ID"""
        try:
            await self.application.bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = update.effective_user
        message_text = update.message.text
        
        print(f"[START] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} ({user.first_name})")
        print(f"[START] –ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")
        print(f"[START] –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {context.args}")
        print(f"[START] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: {len(context.args)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –∫–æ–º–∞–Ω–¥–µ
        if len(context.args) > 0:
            print(f"[START] –ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: '{context.args[0]}'")
            if context.args[0].startswith('auth_'):
                auth_token = context.args[0][5:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'auth_'
                print(f"[AUTH] –ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_token}")
                await self.handle_auth_token(update, context, auth_token, user)
                return
            else:
                print(f"[WARN] –ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'auth_': '{context.args[0]}'")
        else:
            print("[WARN] –ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ /start")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
            telegram_user = await sync_to_async(TelegramUser.objects.get)(telegram_id=user.id)
            django_user = await sync_to_async(lambda: telegram_user.user)()
            user_name = await sync_to_async(lambda: django_user.get_full_name())()
            
            user_role_display = await sync_to_async(lambda: django_user.get_role_display())()
            welcome_text = f"""
üèóÔ∏è –ü—Ä–∏–≤–µ—Ç, {user_name}!
–†–æ–ª—å: {user_role_display}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
            """
            
            # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å
            from django.urls import reverse
            from django.contrib.sites.models import Site
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω —Å–∞–π—Ç–∞
            try:
                current_site = await sync_to_async(Site.objects.get_current)()
                domain = current_site.domain
            except:
                domain = "127.0.0.1:8000"  # Fallback –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞
            from accounts.models import TelegramAuthToken
            import uuid
            from datetime import datetime, timedelta
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å
            login_token = str(uuid.uuid4())
            from django.utils import timezone
            expires_at = timezone.now() + timedelta(minutes=30)  # –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç 30 –º–∏–Ω—É—Ç
            
            login_auth_token = await sync_to_async(TelegramAuthToken.objects.create)(
                token=login_token,
                user=django_user,
                telegram_user=telegram_user,
                expires_at=expires_at,
                is_used=False
            )
            
            print(f"[AUTH] –°–æ–∑–¥–∞–Ω —Ç–æ–∫–µ–Ω –¥–ª—è –≤—Ö–æ–¥–∞: {login_token}, –∏—Å—Ç–µ–∫–∞–µ—Ç: {expires_at}")
            
            # URL –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞
            panel_url = f"http://{domain}{reverse('accounts:telegram_login')}?auth_token={login_token}"
            
            keyboard = [
                [InlineKeyboardButton("üåê –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å", url=panel_url)],
                [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="tasks")],
                [InlineKeyboardButton("üèóÔ∏è –ü—Ä–æ–µ–∫—Ç—ã", callback_data="projects")],
                [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="create_task")],
                [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
        except TelegramUser.DoesNotExist:
            welcome_text = f"""
üèóÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Construction Bot!

–ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞
2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É
3. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç –≤ –ø—Ä–æ—Ñ–∏–ª–µ

–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞!
            """
            reply_markup = None
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ start_command: {e}")
            welcome_text = f"""
üèóÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Construction Bot!

–ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
            """
            reply_markup = None
        
        await self.send_message(update, welcome_text, reply_markup=reply_markup)
    
    async def handle_auth_token(self, update: Update, context: ContextTypes.DEFAULT_TYPE, auth_token: str, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        print(f"[AUTH] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_token}")
        print(f"[AUTH] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id} ({user.first_name} {user.last_name})")
        print(f"[AUTH] Username: @{user.username}")
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–º UUID
            try:
                import uuid
                uuid.UUID(auth_token)
            except ValueError:
                print(f"[ERROR] –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞: {auth_token}")
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
                return
            
            # –ò—â–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            try:
                print(f"[AUTH] –ò—â–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
                auth_token_obj = await sync_to_async(TelegramAuthToken.objects.get)(token=auth_token)
                print(f"[AUTH] –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {auth_token_obj.token}")
                print(f"[AUTH] –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω: {auth_token_obj.created_at}")
                print(f"[AUTH] –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç: {auth_token_obj.expires_at}")
                print(f"[AUTH] –¢–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {auth_token_obj.is_used}")
            except TelegramAuthToken.DoesNotExist:
                print(f"[ERROR] –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {auth_token}")
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
            if await sync_to_async(auth_token_obj.is_expired)():
                await update.message.reply_text("–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–∏ —Ç–æ–∫–µ–Ω
            if auth_token_obj.is_used:
                print(f"[ERROR] –¢–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {auth_token_obj.is_used}")
                await update.message.reply_text("–¢–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
                return
            
            print(f"[AUTH] –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            print(f"[AUTH] –°–æ–∑–¥–∞–µ–º/–Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –¥–ª—è ID: {user.id}")
            
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º Django –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            email = f"telegram_{user.id}@example.com"
            print(f"[AUTH] –°–æ–∑–¥–∞–µ–º/–Ω–∞—Ö–æ–¥–∏–º Django –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {email}")
            
            try:
                django_user = await sync_to_async(User.objects.get)(email=email)
                print(f"[AUTH] –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Django –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {django_user.email}")
            except User.DoesNotExist:
                print(f"[AUTH] –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ Django –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {email}")
                django_user = await sync_to_async(User.objects.create_user)(
                    email=email,
                    first_name=user.first_name or 'Telegram',
                    last_name=user.last_name or 'User',
                    role='foreman',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ—Ä–∞–±
                    is_active=True
                )
                print(f"[AUTH] Django –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {django_user.email} (ID: {django_user.id})")
            
            # –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ Django –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            telegram_user, created = await sync_to_async(TelegramUser.objects.get_or_create)(
                telegram_id=user.id,
                defaults={
                    'user': django_user,  # –°—Ä–∞–∑—É –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ Django –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    'username': user.username or '',
                    'first_name': user.first_name or '',
                    'last_name': user.last_name or '',
                    'photo_url': '',
                    'language_code': user.language_code or 'ru'
                }
            )
            
            if created:
                print(f"[AUTH] –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram: {telegram_user.telegram_id}")
            else:
                print(f"[AUTH] –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram: {telegram_user.telegram_id}")
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                telegram_user.username = user.username or ''
                telegram_user.first_name = user.first_name or ''
                telegram_user.last_name = user.last_name or ''
                telegram_user.photo_url = ''
                telegram_user.language_code = user.language_code or 'ru'
                await sync_to_async(telegram_user.save)()
                print(f"[AUTH] Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω")
            
            # –û—Ç–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
            print(f"[AUTH] –û—Ç–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π...")
            await sync_to_async(auth_token_obj.mark_as_used)(django_user, telegram_user)
            print(f"[AUTH] –¢–æ–∫–µ–Ω –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π")
            
            user_name = await sync_to_async(lambda: django_user.get_full_name())()
            welcome_text = f"""
‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!

–í–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å–∏—Å—Ç–µ–º–µ.
–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞!

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.
            """
            
            # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å
            from django.urls import reverse
            from django.contrib.sites.models import Site
            from django.conf import settings
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω —Å–∞–π—Ç–∞
            try:
                current_site = await sync_to_async(Site.objects.get_current)()
                domain = current_site.domain
            except:
                domain = "127.0.0.1:8000"  # Fallback –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞
            from accounts.models import TelegramAuthToken
            import uuid
            from datetime import datetime, timedelta
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å
            login_token = str(uuid.uuid4())
            from django.utils import timezone
            expires_at = timezone.now() + timedelta(minutes=30)  # –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç 30 –º–∏–Ω—É—Ç
            
            login_auth_token = await sync_to_async(TelegramAuthToken.objects.create)(
                token=login_token,
                user=django_user,
                telegram_user=telegram_user,
                expires_at=expires_at,
                is_used=False
            )
            
            print(f"[AUTH] –°–æ–∑–¥–∞–Ω —Ç–æ–∫–µ–Ω –¥–ª—è –≤—Ö–æ–¥–∞: {login_token}, –∏—Å—Ç–µ–∫–∞–µ—Ç: {expires_at}")
            
            # URL –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞
            panel_url = f"http://{domain}{reverse('accounts:telegram_login')}?auth_token={login_token}"
            
            keyboard = [
                [InlineKeyboardButton("üåê –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å", url=panel_url)],
                [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="my_tasks")],
                [InlineKeyboardButton("üèóÔ∏è –ü—Ä–æ–µ–∫—Ç—ã", callback_data="projects")],
                [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="create_task")],
                [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(welcome_text, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_auth_token: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/projects - –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
/tasks - –í–∞—à–∏ –∑–∞–¥–∞—á–∏
/stages - –≠—Ç–∞–ø—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
/create_task - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É

üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        """
        await self.send_message(update, help_text)
    
    async def projects_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /projects - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            telegram_user = await sync_to_async(TelegramUser.objects.get)(telegram_id=update.effective_user.id)
            user = await sync_to_async(lambda: telegram_user.user)()
            user_role = await sync_to_async(lambda: user.role)()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ get_accessible_projects()
            projects = await sync_to_async(list)(user.get_accessible_projects().order_by('-created_at')[:10])
            
            if not projects:
                role_text = {
                    'admin': '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                    'foreman': '–ø—Ä–æ—Ä–∞–±',
                    'warehouse_keeper': '–∫–ª–∞–¥–æ–≤—â–∏–∫',
                    'supplier': '—Å–Ω–∞–±–∂–µ–Ω–µ—Ü',
                    'contractor': '–ø–æ–¥—Ä—è–¥—á–∏–∫'
                }.get(user_role, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                
                await self.send_message(update, f"üì≠ –£ –≤–∞—Å –∫–∞–∫ {role_text} –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.")
                return
            
            user_role_display = await sync_to_async(lambda: user.get_role_display())()
            text = f"üèóÔ∏è –ü—Ä–æ–µ–∫—Ç—ã ({user_role_display}):\n\n"
            keyboard = []
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
            project_data = []
            for project in projects:
                try:
                    project_status = project.status
                except:
                    project_status = 'unknown'
                
                status_emoji = {
                    'planning': 'üìã',
                    'in_progress': 'üöß',
                    'on_hold': '‚è∏Ô∏è',
                    'completed': '‚úÖ',
                    'cancelled': '‚ùå'
                }.get(project_status, '‚ùì')
                
                project_data.append({
                    'project': project,
                    'status_emoji': status_emoji
                })
            
            # –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            for data in project_data:
                project = data['project']
                status_emoji = data['status_emoji']
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
                project_role = "üë§ –£—á–∞—Å—Ç–Ω–∏–∫"
                project_created_by = await sync_to_async(lambda: project.created_by)()
                project_foreman = await sync_to_async(lambda: project.foreman)()
                
                if project_created_by == user:
                    project_role = "üëë –°–æ–∑–¥–∞—Ç–µ–ª—å"
                elif project_foreman == user:
                    project_role = "üë∑ –ü—Ä–æ—Ä–∞–±"
                
                project_name = await sync_to_async(lambda: project.name)()
                project_budget = await sync_to_async(lambda: project.budget)()
                project_spent = await sync_to_async(lambda: project.spent_amount)()
                project_id = await sync_to_async(lambda: project.id)()
                
                if project_budget > 0:
                    progress = (project_spent / project_budget) * 100
                    text += f"{status_emoji} {project_name}\nüí∞ {project_budget:,.0f}‚ÇΩ | üí∏ {project_spent:,.0f}‚ÇΩ | üìä {progress:.0f}%\n\n"
                else:
                    text += f"{status_emoji} {project_name}\nüí∞ {project_budget:,.0f}‚ÇΩ | üí∏ {project_spent:,.0f}‚ÇΩ\n\n"
                
                keyboard.append([InlineKeyboardButton(
                    f"üìã {project_name[:30]}{'...' if len(project_name) > 30 else ''}",
                    callback_data=f"project_{project_id}"
                )])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await self.send_message(update, text, reply_markup=reply_markup)
            
        except TelegramUser.DoesNotExist:
            await self.send_message(update, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ projects_command: {e}")
            await self.send_message(update, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤.")
    
    async def tasks_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /tasks - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            telegram_user = await sync_to_async(TelegramUser.objects.get)(telegram_id=update.effective_user.id)
            user = await sync_to_async(lambda: telegram_user.user)()
            user_role = await sync_to_async(lambda: user.role)()
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
            if user_role == 'admin':
                # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∏–¥–∏—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏
                tasks = await sync_to_async(lambda: list(ExpenseItem.objects.all().order_by('-created_at')[:15]))()
            elif user_role == 'foreman':
                # –ü—Ä–æ—Ä–∞–± –≤–∏–¥–∏—Ç –∑–∞–¥–∞—á–∏ —Å–≤–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
                projects = await sync_to_async(lambda: list(Project.objects.filter(
                    Q(foreman=user) | Q(created_by=user)
                ).values_list('id', flat=True)))()
                tasks = await sync_to_async(lambda: list(ExpenseItem.objects.filter(
                    project_id__in=projects
                ).order_by('-created_at')[:15]))()
            else:
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –≤–∏–¥—è—Ç —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏
                tasks = await sync_to_async(lambda: list(ExpenseItem.objects.filter(
                    Q(created_by=user) | Q(assigned_to=user)
                ).order_by('-created_at')[:15]))()
            
            if not tasks:
                role_text = {
                    'admin': '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                    'foreman': '–ø—Ä–æ—Ä–∞–±',
                    'warehouse_keeper': '–∫–ª–∞–¥–æ–≤—â–∏–∫',
                    'supplier': '—Å–Ω–∞–±–∂–µ–Ω–µ—Ü',
                    'contractor': '–ø–æ–¥—Ä—è–¥—á–∏–∫'
                }.get(user_role, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                
                await self.send_message(update, f"üì≠ –£ –≤–∞—Å –∫–∞–∫ {role_text} –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
                return
            
            user_role_display = await sync_to_async(lambda: user.get_role_display())()
            text = f"üìã –ó–∞–¥–∞—á–∏ ({user_role_display}):\n\n"
            keyboard = []
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            task_data = []
            for task in tasks:
                try:
                    task_status = task.status
                except:
                    task_status = 'unknown'
                
                status_emoji = {
                    'new': 'üÜï',
                    'todo': 'üìù',
                    'in_progress': 'üöß',
                    'review': 'üëÄ',
                    'done': '‚úÖ',
                    'cancelled': '‚ùå'
                }.get(task_status, '‚ùì')
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
                project_name = "–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞"
                if hasattr(task, 'project') and task.project:
                    try:
                        project_name = task.project.name[:20] + "..." if len(task.project.name) > 20 else task.project.name
                    except:
                        project_name = "–ü—Ä–æ–µ–∫—Ç"
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –≤ –∑–∞–¥–∞—á–µ
                task_role = "üë§ –£—á–∞—Å—Ç–Ω–∏–∫"
                if task.created_by == user:
                    task_role = "üëë –°–æ–∑–¥–∞—Ç–µ–ª—å"
                elif hasattr(task, 'assigned_to') and task.assigned_to == user:
                    task_role = "üéØ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
                
                task_data.append({
                    'task': task,
                    'status_emoji': status_emoji,
                    'project_name': project_name,
                    'task_role': task_role
                })
            
            # –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            for data in task_data:
                task = data['task']
                status_emoji = data['status_emoji']
                project_name = data['project_name']
                task_role = data['task_role']
                
                task_status_display = await sync_to_async(lambda: task.get_status_display())()
                task_created_date = await sync_to_async(lambda: task.created_at.strftime('%d.%m.%Y'))()
                
                task_description = await sync_to_async(lambda: task.description)()
                task_amount = await sync_to_async(lambda: task.amount)()
                task_id = await sync_to_async(lambda: task.id)()
                
                text += f"{status_emoji} {task_description[:35]}{'...' if len(task_description) > 35 else ''}\n"
                text += f"üèóÔ∏è {project_name} | üí∞ {task_amount:,.0f}‚ÇΩ | {task_status_display}\n\n"
                
                keyboard.append([InlineKeyboardButton(
                    f"{status_emoji} {task_description[:25]}{'...' if len(task_description) > 25 else ''}",
                    callback_data=f"task_{task_id}"
                )])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await self.send_message(update, text, reply_markup=reply_markup)
            
        except TelegramUser.DoesNotExist:
            await self.send_message(update, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ tasks_command: {e}")
            await self.send_message(update, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á.")
    
    async def show_project_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE, project_id: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            print(f"[PROJECT_DETAILS] –ü–æ–ª—É—á–µ–Ω project_id: {project_id}")
            telegram_user = await sync_to_async(TelegramUser.objects.get)(telegram_id=update.effective_user.id)
            user = await sync_to_async(lambda: telegram_user.user)()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç
            project = await sync_to_async(Project.objects.get)(id=project_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É
            has_access = False
            user_role = await sync_to_async(lambda: user.role)()
            
            # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –ø—Ä–æ–µ–∫—Ç–∞–º
            if user_role == 'admin':
                has_access = True
            else:
                project_created_by = await sync_to_async(lambda: project.created_by)()
                project_foreman = await sync_to_async(lambda: project.foreman)()
                
                if project_created_by == user or project_foreman == user:
                    has_access = True
                elif await sync_to_async(ProjectMember.objects.filter(project=project, user=user).exists)():
                    has_access = True
            
            if not has_access:
                await self.send_message(update, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–µ–∫—Ç–∞
            total_tasks = await sync_to_async(ExpenseItem.objects.filter(project=project).count)()
            completed_tasks = await sync_to_async(ExpenseItem.objects.filter(project=project, status='done').count)()
            
            try:
                project_status = project.status
            except:
                project_status = 'unknown'
            
            status_emoji = {
                'planning': 'üìã',
                'in_progress': 'üöß',
                'on_hold': '‚è∏Ô∏è',
                'completed': '‚úÖ',
                'cancelled': '‚ùå'
            }.get(project_status, '‚ùì')
            
            project_status_display = await sync_to_async(lambda: project.get_status_display())()
            foreman_name = await sync_to_async(lambda: project.foreman.get_full_name() if project.foreman else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')()
            
            project_name = await sync_to_async(lambda: project.name)()
            project_budget = await sync_to_async(lambda: project.budget)()
            project_spent = await sync_to_async(lambda: project.spent_amount)()
            project_description = await sync_to_async(lambda: project.description)()
            
            if project_budget > 0:
                progress = (project_spent / project_budget) * 100
                text = f"üèóÔ∏è {project_name}\n{status_emoji} {project_status_display}\nüí∞ {project_budget:,.0f}‚ÇΩ | üí∏ {project_spent:,.0f}‚ÇΩ | üìä {progress:.0f}%\nüìã {total_tasks} –∑–∞–¥–∞—á ({completed_tasks} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)\nüë∑ {foreman_name}\n"
            else:
                text = f"üèóÔ∏è {project_name}\n{status_emoji} {project_status_display}\nüí∞ {project_budget:,.0f}‚ÇΩ | üí∏ {project_spent:,.0f}‚ÇΩ\nüìã {total_tasks} –∑–∞–¥–∞—á ({completed_tasks} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)\nüë∑ {foreman_name}\n"
            
            if project_description:
                text += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{project_description[:200]}{'...' if len(project_description) > 200 else ''}\n"
            
            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = [
                [InlineKeyboardButton("üìã –ó–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞", callback_data=f"project_tasks_{project_id}")],
                [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"create_task_project_{project_id}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º", callback_data="projects")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await self.send_message(update, text, reply_markup=reply_markup)
            
        except Project.DoesNotExist:
            await self.send_message(update, "‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_project_details: {e}")
            await self.send_message(update, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.")
    
    async def show_project_tasks(self, update: Update, context: ContextTypes.DEFAULT_TYPE, project_id: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            telegram_user = await sync_to_async(TelegramUser.objects.get)(telegram_id=update.effective_user.id)
            user = await sync_to_async(lambda: telegram_user.user)()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç
            project = await sync_to_async(Project.objects.get)(id=project_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É
            user_role = await sync_to_async(lambda: user.role)()
            has_access = False
            
            # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –ø—Ä–æ–µ–∫—Ç–∞–º
            if user_role == 'admin':
                has_access = True
            else:
                project_created_by = await sync_to_async(lambda: project.created_by)()
                project_foreman = await sync_to_async(lambda: project.foreman)()
                
                if project_created_by == user or project_foreman == user:
                    has_access = True
                elif await sync_to_async(ProjectMember.objects.filter(project=project, user=user).exists)():
                    has_access = True
            
            if not has_access:
                await self.send_message(update, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞
            tasks = await sync_to_async(list)(ExpenseItem.objects.filter(project=project).order_by('-created_at')[:10])
            
            project_name = await sync_to_async(lambda: project.name)()
            
            if not tasks:
                await self.send_message(update, f"üì≠ –í –ø—Ä–æ–µ–∫—Ç–µ '{project_name}' –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
                return
            
            text = f"üìã –ó–∞–¥–∞—á–∏: {project_name}\n\n"
            keyboard = []
            
            for task in tasks:
                try:
                    task_status = task.status
                except:
                    task_status = 'unknown'
                
                status_emoji = {
                    'new': 'üÜï',
                    'todo': 'üìù',
                    'in_progress': 'üöß',
                    'review': 'üëÄ',
                    'done': '‚úÖ',
                    'cancelled': '‚ùå'
                }.get(task_status, '‚ùì')
                
                task_status_display = await sync_to_async(lambda: task.get_status_display())()
                task_creator_name = await sync_to_async(lambda: task.created_by.get_full_name())()
                
                try:
                    task_description = task.description
                    task_amount = task.amount
                    task_id = task.id
                except:
                    task_description = "–ó–∞–¥–∞—á–∞"
                    task_amount = 0
                    task_id = "unknown"
                
                text += f"{status_emoji} {task_description[:40]}{'...' if len(task_description) > 40 else ''}\n"
                text += f"üí∞ {task_amount:,.0f}‚ÇΩ | {task_status_display} | üë§ {task_creator_name}\n\n"
                
                keyboard.append([InlineKeyboardButton(
                    f"{status_emoji} {task_description[:25]}{'...' if len(task_description) > 25 else ''}",
                    callback_data=f"task_{task_id}"
                )])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É", callback_data=f"project_{project_id}")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            await self.send_message(update, text, reply_markup=reply_markup)
            
        except Project.DoesNotExist:
            await self.send_message(update, "‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_project_tasks: {e}")
            await self.send_message(update, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞.")
    
    async def show_project_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE, project_id: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            telegram_user = await sync_to_async(TelegramUser.objects.get)(telegram_id=update.effective_user.id)
            user = await sync_to_async(lambda: telegram_user.user)()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç
            project = await sync_to_async(Project.objects.get)(id=project_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_tasks = await sync_to_async(ExpenseItem.objects.filter(project=project).count)()
            completed_tasks = await sync_to_async(ExpenseItem.objects.filter(project=project, status='done').count)()
            pending_tasks = await sync_to_async(ExpenseItem.objects.filter(project=project, status='todo').count)()
            in_progress_tasks = await sync_to_async(ExpenseItem.objects.filter(project=project, status='in_progress').count)()
            
            # –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–¥–∞—á
            total_amount = await sync_to_async(ExpenseItem.objects.filter(project=project).aggregate(
                total=models.Sum('amount')
            ))()
            total_amount = total_amount['total'] or 0
            
            project_name = await sync_to_async(lambda: project.name)()
            project_budget = await sync_to_async(lambda: project.budget)()
            project_spent = await sync_to_async(lambda: project.spent_amount)()
            
            text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ '{project_name}':\n\n"
            text += f"üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}\n"
            text += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_tasks}\n"
            text += f"‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {pending_tasks}\n"
            text += f"üöß –í —Ä–∞–±–æ—Ç–µ: {in_progress_tasks}\n\n"
            text += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–¥–∞—á: {total_amount:,.2f} ‚ÇΩ\n"
            text += f"üí∞ –ë—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞: {project_budget:,.2f} ‚ÇΩ\n"
            text += f"üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {project_spent:,.2f} ‚ÇΩ\n"
            
            if project_budget > 0:
                budget_progress = (project_spent / project_budget) * 100
                text += f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞: {budget_progress:.1f}%\n"
            
            if total_tasks > 0:
                task_progress = (completed_tasks / total_tasks) * 100
                text += f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞—á: {task_progress:.1f}%\n"
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É", callback_data=f"project_{project_id}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await self.send_message(update, text, reply_markup=reply_markup)
            
        except Project.DoesNotExist:
            await self.send_message(update, "‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_project_stats: {e}")
            await self.send_message(update, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞.")
    
    async def stages_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stages - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–∞–ø—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞"""
        try:
            stages = await sync_to_async(list)(ConstructionStage.objects.filter(is_active=True).order_by('order'))
            
            if not stages:
                await self.send_message(update, "üì≠ –≠—Ç–∞–ø—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
                return
            
            text = "üèóÔ∏è –≠—Ç–∞–ø—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞:\n\n"
            
            for i, stage in enumerate(stages, 1):
                text += f"{i}. {stage.name}\n"
                if stage.description:
                    text += f"   {stage.description}\n"
                text += "\n"
            
            await self.send_message(update, text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ stages_command: {e}")
            await self.send_message(update, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç—Ç–∞–ø–æ–≤.")
    
    async def create_task_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /create_task - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É"""
        try:
            telegram_user = await sync_to_async(TelegramUser.objects.get)(telegram_id=update.effective_user.id)
            user = await sync_to_async(lambda: telegram_user.user)()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ get_accessible_projects()
            projects = await sync_to_async(list)(user.get_accessible_projects().order_by('-created_at')[:10])
            
            if not projects:
                await self.send_message(update, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á.")
                return
            
            text = "‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:"
            keyboard = []
            
            for project in projects:
                try:
                    project_name = project.name
                    project_id = project.id
                except:
                    project_name = "–ü—Ä–æ–µ–∫—Ç"
                    project_id = "unknown"
                
                keyboard.append([InlineKeyboardButton(
                    f"üèóÔ∏è {project_name}",
                    callback_data=f"create_task_project_{project_id}"
                )])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await self.send_message(update, text, reply_markup=reply_markup)
            
        except TelegramUser.DoesNotExist:
            await self.send_message(update, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ create_task_command: {e}")
            await self.send_message(update, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        print(f"[CALLBACK] –ü–æ–ª—É—á–µ–Ω callback: {data}")
        
        if data == "my_tasks":
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç update –¥–ª—è –∫–æ–º–∞–Ω–¥
            mock_update = Update(update_id=update.update_id, callback_query=query)
            await self.tasks_command(mock_update, context)
        elif data == "projects":
            mock_update = Update(update_id=update.update_id, callback_query=query)
            await self.projects_command(mock_update, context)
        elif data == "tasks":
            mock_update = Update(update_id=update.update_id, callback_query=query)
            await self.tasks_command(mock_update, context)
        elif data == "create_task":
            mock_update = Update(update_id=update.update_id, callback_query=query)
            await self.create_task_command(mock_update, context)
        elif data == "help":
            mock_update = Update(update_id=update.update_id, callback_query=query)
            await self.help_command(mock_update, context)
        elif data == "stages":
            mock_update = Update(update_id=update.update_id, callback_query=query)
            await self.stages_command(mock_update, context)
        elif data.startswith("create_task_project_"):
            project_id = data.replace("create_task_project_", "")
            mock_update = Update(update_id=update.update_id, callback_query=query)
            await self.start_create_task(mock_update, context, project_id)
        elif data.startswith("project_tasks_"):
            project_id = data.replace("project_tasks_", "")
            print(f"[CALLBACK] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º project_tasks —Å ID: {project_id}")
            mock_update = Update(update_id=update.update_id, callback_query=query)
            await self.show_project_tasks(mock_update, context, project_id)
        elif data.startswith("project_"):
            project_id = data.replace("project_", "")
            mock_update = Update(update_id=update.update_id, callback_query=query)
            await self.show_project_details(mock_update, context, project_id)
        elif data.startswith("task_"):
            task_id = data.replace("task_", "")
            mock_update = Update(update_id=update.update_id, callback_query=query)
            await self.show_task_details(mock_update, context, task_id)
    
    
    async def show_task_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE, task_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏"""
        try:
            task = await sync_to_async(ExpenseItem.objects.get)(id=task_id)
            
            try:
                task_status = task.status
            except:
                task_status = 'unknown'
            
            status_emoji = {
                'new': 'üÜï', 'todo': 'üìù', 'in_progress': 'üöß',
                'review': 'üëÄ', 'done': '‚úÖ', 'cancelled': '‚ùå'
            }.get(task_status, 'üìù')
            
            task_status_display = await sync_to_async(lambda: task.get_status_display())()
            task_creator_name = await sync_to_async(lambda: task.created_by.get_full_name())()
            task_assigned_name = await sync_to_async(lambda: task.assigned_to.get_full_name() if task.assigned_to else None)()
            
            task_project_name = await sync_to_async(lambda: task.project.name)()
            task_stage_name = await sync_to_async(lambda: task.stage.name if task.stage else None)()
            
            task_title = await sync_to_async(lambda: task.title)()
            task_created_date = await sync_to_async(lambda: task.created_at.strftime('%d.%m.%Y %H:%M'))()
            task_amount = await sync_to_async(lambda: task.amount)()
            task_description = await sync_to_async(lambda: task.description)()
            
            text = f"{status_emoji} {task_title}\n"
            text += f"üìä {task_status_display} | üí∞ {task_amount:,.0f}‚ÇΩ\n"
            text += f"üèóÔ∏è {task_project_name}\n"
            text += f"üë§ {task_creator_name}"
            if task_assigned_name:
                text += f" ‚Üí {task_assigned_name}"
            text += f"\nüìÖ {task_created_date}\n"
            
            if task_description:
                text += f"\nüìù {task_description[:100]}{'...' if len(task_description) > 100 else ''}\n"
            
            if task_stage_name:
                text += f"üèóÔ∏è –≠—Ç–∞–ø: {task_stage_name}\n"
            
            task_project_id = await sync_to_async(lambda: task.project.id)()
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º", callback_data="my_tasks")],
                [InlineKeyboardButton("üèóÔ∏è –ü—Ä–æ–µ–∫—Ç", callback_data=f"project_{task_project_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await self.send_message(update, text, reply_markup=reply_markup)
            
        except ExpenseItem.DoesNotExist:
            await self.send_message(update, "‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_task_details: {e}")
            await self.send_message(update, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    
    async def start_create_task(self, update: Update, context: ContextTypes.DEFAULT_TYPE, project_id):
        """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        try:
            project = await sync_to_async(Project.objects.get)(id=project_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º project_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['creating_task'] = {
                'project_id': project_id
            }
            
            project_name = await sync_to_async(lambda: project.name)()
            text = f"‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: {project_name}\n\n"
            text += "üìù –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            text += "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏. –û–ø–∏—Å–∞–Ω–∏–µ. 1000‚ÇΩ\n"
            text += "‚Ä¢ –ù—É–∂–Ω–æ –∫—É–ø–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã. 5000 —Ä—É–±–ª–µ–π\n"
            text += "‚Ä¢ –°–¥–µ–ª–∞—Ç—å –º–æ–Ω—Ç–∞–∂. –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã. 2 —Ç—ã—Å\n\n"
            text += "üì∏ –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª!\n"
            text += "üìé –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: JPG, PNG, PDF, DOC, XLS\n\n"
            text += "üí° –°–û–í–ï–¢: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é - –±–æ—Ç —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞—Å—Ç –∑–∞–¥–∞—á—É!\n"
            text += "–ü—Ä–∏–º–µ—Ä: '–ö—É–ø–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã. 5000‚ÇΩ' + —Ñ–æ—Ç–æ\n\n"
            text += "–ë–æ—Ç —Å–∞–º –ø–æ–π–º–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å—É–º–º—É!"
            
            await self.send_message(update, text)
            
        except Project.DoesNotExist:
            await self.send_message(update, "‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_create_task: {e}")
            await self.send_message(update, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
            if 'creating_task' not in context.user_data:
                return
            
            creating_task = context.user_data['creating_task']
            project_id = creating_task.get('project_id')
            
            if not project_id:
                return
            
            text = update.message.text.strip()
            
            # –£–º–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –∏–∑–≤–ª–µ–∫–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å—Ä–∞–∑—É
            tasks_data = self.parse_task_message(text)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            await self.create_task_smart(update, context, project_id, tasks_data)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_text_message: {e}")
            await self.send_message(update, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
    
    def parse_task_message(self, text: str) -> list:
        """–£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–∞—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        import re
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        numbered_tasks = re.findall(r'^\s*\d+\.\s*(.+)$', text, re.MULTILINE)
        
        if numbered_tasks:
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞
            tasks = []
            for task_text in numbered_tasks:
                task_data = self.parse_single_task(task_text.strip())
                tasks.append(task_data)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á (–º–∞–∫—Å–∏–º—É–º 20)
            if len(tasks) > 20:
                tasks = tasks[:20]
            
            return tasks
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–¥–Ω—É –∑–∞–¥–∞—á—É
            return [self.parse_single_task(text)]
    
    def parse_single_task(self, text: str) -> dict:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ"""
        import re
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        task_data = {
            'title': '',
            'description': '',
            'amount': 0.0
        }
        
        # –ò—â–µ–º —Å—É–º–º—É –≤ —Ç–µ–∫—Å—Ç–µ (—Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
        amount_patterns = [
            r'(\d+(?:\.\d+)?)\s*‚ÇΩ',  # 1000‚ÇΩ
            r'(\d+(?:\.\d+)?)\s*—Ä—É–±',  # 1000 —Ä—É–±
            r'(\d+(?:\.\d+)?)\s*—Ä—É–±–ª–µ–π',  # 1000 —Ä—É–±–ª–µ–π
            r'(\d+(?:\.\d+)?)\s*—Ä',  # 1000—Ä
            r'(\d+(?:\.\d+)?)\s*—Ç—ã—Å',  # 1000 —Ç—ã—Å
            r'(\d+(?:\.\d+)?)\s*—Ç—ã—Å—è—á',  # 1000 —Ç—ã—Å—è—á
            r'(\d+(?:\.\d+)?)\s*–∫',  # 1000–∫
        ]
        
        amount = 0.0
        for pattern in amount_patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                amount = float(match.group(1))
                # –ï—Å–ª–∏ —ç—Ç–æ —Ç—ã—Å—è—á–∏, —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 1000
                if '—Ç—ã—Å' in pattern or '—Ç—ã—Å—è—á' in pattern or '–∫' in pattern:
                    amount *= 1000
                break
        
        task_data['amount'] = amount
        
        # –£–±–∏—Ä–∞–µ–º —Å—É–º–º—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è
        clean_text = text
        for pattern in amount_patterns:
            clean_text = re.sub(pattern, '', clean_text, flags=re.IGNORECASE)
        
        # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–æ–±—ã—á–Ω–æ –≤ –Ω–∞—á–∞–ª–µ –∏–ª–∏ –ø–æ—Å–ª–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤)
        title_patterns = [
            r'^([^.!?]+)[.!?]',  # –î–æ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
            r'–∑–∞–¥–∞—á–∞[:\s]+([^.!?]+)',  # –ü–æ—Å–ª–µ "–∑–∞–¥–∞—á–∞:"
            r'–Ω—É–∂–Ω–æ[:\s]+([^.!?]+)',  # –ü–æ—Å–ª–µ "–Ω—É–∂–Ω–æ:"
            r'—Å–¥–µ–ª–∞—Ç—å[:\s]+([^.!?]+)',  # –ü–æ—Å–ª–µ "—Å–¥–µ–ª–∞—Ç—å:"
        ]
        
        title = ''
        for pattern in title_patterns:
            match = re.search(pattern, clean_text, re.IGNORECASE)
            if match:
                title = match.group(1).strip()
                break
        
        # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞
        if not title:
            words = clean_text.split()
            if len(words) > 0:
                title = ' '.join(words[:5])  # –ü–µ—Ä–≤—ã–µ 5 —Å–ª–æ–≤
        
        task_data['title'] = title
        
        # –û–ø–∏—Å–∞–Ω–∏–µ - –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç
        if title and title in clean_text:
            description = clean_text.replace(title, '').strip()
        else:
            description = clean_text.strip()
        
        # –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        description = re.sub(r'[^\w\s.,!?-]', '', description)
        task_data['description'] = description
        
        return task_data
    
    async def create_task_smart(self, update: Update, context: ContextTypes.DEFAULT_TYPE, project_id: str, tasks_data: list):
        """–£–º–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            telegram_user = await sync_to_async(TelegramUser.objects.get)(telegram_id=update.effective_user.id)
            user = await sync_to_async(lambda: telegram_user.user)()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç
            project = await sync_to_async(Project.objects.get)(id=project_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É –ø—Ä–æ–µ–∫—Ç–∞ (–∫–æ–ª–æ–Ω–∫–∞ "–ù–æ–≤—ã–µ")
            from kanban.models import KanbanColumn
            column = await sync_to_async(KanbanColumn.objects.filter(board__project=project).first)()
            
            if not column:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                from kanban.models import KanbanBoard
                board, created = await sync_to_async(KanbanBoard.objects.get_or_create)(
                    project=project,
                    defaults={'created_by': user}
                )
                column = await sync_to_async(KanbanColumn.objects.create)(
                    board=board,
                    name="–ù–æ–≤—ã–µ",
                    order=0
                )
            
            created_tasks = []
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
            for task_data in tasks_data:
                task = await sync_to_async(ExpenseItem.objects.create)(
                    title=task_data['title'],
                    description=task_data['description'],
                    amount=task_data['amount'],
                    project=project,
                    column=column,
                    created_by=user,
                    status='new'
                )
                created_tasks.append(task)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è (–ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫ –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–µ)
            attachments = context.user_data['creating_task'].get('attachments', [])
            if attachments and created_tasks:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–æ–∂–µ–Ω–∏—è—Ö –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏
                attachment_info = []
                for attachment in attachments:
                    if attachment['type'] == 'photo':
                        attachment_info.append(f"üì∏ {attachment['filename']}")
                    elif attachment['type'] == 'document':
                        attachment_info.append(f"üìé {attachment['original_filename']}")
                
                if attachment_info:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–ª–æ–∂–µ–Ω–∏—è—Ö
                    first_task = created_tasks[0]
                    updated_description = first_task.description
                    if updated_description:
                        updated_description += f"\n\n–í–ª–æ–∂–µ–Ω–∏—è:\n" + "\n".join(attachment_info)
                    else:
                        updated_description = "–í–ª–æ–∂–µ–Ω–∏—è:\n" + "\n".join(attachment_info)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
                    first_task.description = updated_description
                    await sync_to_async(first_task.save)()
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
            del context.user_data['creating_task']
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            if len(created_tasks) == 1:
                response = f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                task_data = tasks_data[0]
                response += f"üìã {task_data['title']}\n"
                if task_data['description']:
                    response += f"üìù {task_data['description']}\n"
                if task_data['amount'] > 0:
                    response += f"üí∞ {task_data['amount']:,.0f}‚ÇΩ\n"
                if attachments:
                    response += f"üìé –í–ª–æ–∂–µ–Ω–∏–π: {len(attachments)}\n"
            else:
                response = f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(created_tasks)} –∑–∞–¥–∞—á!\n\n"
                for i, task_data in enumerate(tasks_data[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–¥–∞—á
                    response += f"{i}. {task_data['title']}\n"
                    if task_data['amount'] > 0:
                        response += f"   üí∞ {task_data['amount']:,.0f}‚ÇΩ\n"
                
                if len(tasks_data) > 5:
                    response += f"\n... –∏ –µ—â–µ {len(tasks_data) - 5} –∑–∞–¥–∞—á"
                
                if attachments:
                    response += f"\nüìé –í–ª–æ–∂–µ–Ω–∏–π: {len(attachments)}\n"
            
            await self.send_message(update, response)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ create_task_smart: {e}")
            await self.send_message(update, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á.")
    
    async def handle_photo_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
            if 'creating_task' not in context.user_data:
                return
            
            creating_task = context.user_data['creating_task']
            project_id = creating_task.get('project_id')
            
            if not project_id:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
            photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
            file_id = photo.file_id
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            file = await context.bot.get_file(file_id)
            file_path = file.file_path
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            import os
            import uuid
            from datetime import datetime
            
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            unique_id = str(uuid.uuid4())[:8]
            filename = f"task_photo_{timestamp}_{unique_id}.jpg"
            
            # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            media_dir = "media/expense_photos"
            os.makedirs(media_dir, exist_ok=True)
            local_path = os.path.join(media_dir, filename)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await file.download_to_drive(local_path)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            if 'attachments' not in context.user_data['creating_task']:
                context.user_data['creating_task']['attachments'] = []
            
            context.user_data['creating_task']['attachments'].append({
                'type': 'photo',
                'file_path': local_path,
                'filename': filename,
                'file_id': file_id
            })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ
            caption = update.message.caption
            if caption and caption.strip():
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –≤ –ø–æ–¥–ø–∏—Å–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ –∑–∞–¥–∞—á–∏
                tasks_data = self.parse_task_message(caption)
                await self.create_task_smart(update, context, project_id, tasks_data)
            else:
                await self.send_message(update, f"üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –∑–∞–¥–∞—á–µ!\n\nüìù –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_photo_message: {e}")
            await self.send_message(update, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.")
    
    async def handle_document_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
            if 'creating_task' not in context.user_data:
                return
            
            creating_task = context.user_data['creating_task']
            project_id = creating_task.get('project_id')
            
            if not project_id:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            document = update.message.document
            file_id = document.file_id
            filename = document.file_name
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await context.bot.get_file(file_id)
            file_path = file.file_path
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            import os
            import uuid
            from datetime import datetime
            
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            unique_id = str(uuid.uuid4())[:8]
            file_extension = os.path.splitext(filename)[1]
            new_filename = f"task_file_{timestamp}_{unique_id}{file_extension}"
            
            # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            media_dir = "media/expense_photos"
            os.makedirs(media_dir, exist_ok=True)
            local_path = os.path.join(media_dir, new_filename)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await file.download_to_drive(local_path)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            if 'attachments' not in context.user_data['creating_task']:
                context.user_data['creating_task']['attachments'] = []
            
            context.user_data['creating_task']['attachments'].append({
                'type': 'document',
                'file_path': local_path,
                'filename': new_filename,
                'original_filename': filename,
                'file_id': file_id
            })
            
            await self.send_message(update, f"üìé –§–∞–π–ª '{filename}' –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞–¥–∞—á–µ!\n\nüìù –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_document_message: {e}")
            await self.send_message(update, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")
    
    async def create_task_from_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE, project_id: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            creating_task = context.user_data['creating_task']
            title = creating_task.get('title', '')
            description = creating_task.get('description', '')
            amount = creating_task.get('amount', 0.0)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            telegram_user = await sync_to_async(TelegramUser.objects.get)(telegram_id=update.effective_user.id)
            user = await sync_to_async(lambda: telegram_user.user)()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç
            project = await sync_to_async(Project.objects.get)(id=project_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É –ø—Ä–æ–µ–∫—Ç–∞ (–∫–æ–ª–æ–Ω–∫–∞ "–ù–æ–≤—ã–µ")
            from kanban.models import KanbanColumn
            column = await sync_to_async(KanbanColumn.objects.filter(board__project=project).first)()
            
            if not column:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                from kanban.models import KanbanBoard
                board, created = await sync_to_async(KanbanBoard.objects.get_or_create)(
                    project=project,
                    defaults={'created_by': user}
                )
                column = await sync_to_async(KanbanColumn.objects.create)(
                    board=board,
                    name="–ù–æ–≤—ã–µ",
                    order=0
                )
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            task = await sync_to_async(ExpenseItem.objects.create)(
                title=title,
                description=description,
                amount=amount,
                project=project,
                column=column,
                created_by=user,
                status='new'
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
            del context.user_data['creating_task']
            
            await self.send_message(update, f"‚úÖ –ó–∞–¥–∞—á–∞ '{title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\nüìã –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–∞–º: /tasks")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ create_task_from_data: {e}")
            await self.send_message(update, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_data = context.user_data
        
        if 'creating_task' in user_data:
            await self.handle_task_creation(update, context)
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(
                "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
            )
    
    async def handle_task_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ—à–∞–≥–æ–≤–æ"""
        user_data = context.user_data['creating_task']
        step = user_data['step']
        text = update.message.text
        
        if step == 'title':
            user_data['title'] = text
            user_data['step'] = 'description'
            await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
        
        elif step == 'description':
            if text != '-':
                user_data['description'] = text
            user_data['step'] = 'type'
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –∑–∞–¥–∞—á
            keyboard = [
                [InlineKeyboardButton("üõ†Ô∏è –†–∞–±–æ—Ç–∞", callback_data="task_type_work")],
                [InlineKeyboardButton("üõí –ó–∞–∫—É–ø–∫–∞", callback_data="task_type_purchase")],
                [InlineKeyboardButton("üöö –ü–æ—Å—Ç–∞–≤–∫–∞", callback_data="task_type_delivery")],
                [InlineKeyboardButton("üîß –ú–æ–Ω—Ç–∞–∂", callback_data="task_type_installation")],
                [InlineKeyboardButton("üëÄ –ö–æ–Ω—Ç—Ä–æ–ª—å", callback_data="task_type_control")],
                [InlineKeyboardButton("üìÑ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", callback_data="task_type_documentation")],
                [InlineKeyboardButton("‚ùì –ü—Ä–æ—á–µ–µ", callback_data="task_type_other")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text("üîß –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:", reply_markup=reply_markup)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Construction Bot...")
        try:
            self.application.run_polling()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
_bot_instance = None

def get_bot_instance():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞"""
    global _bot_instance
    if _bot_instance is None:
        _bot_instance = ConstructionBot()
    return _bot_instance

def send_message_to_user(user_id, text, reply_markup=None):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    import asyncio
    
    async def _send():
        bot = get_bot_instance()
        return await bot.send_message_to_user(user_id, text, reply_markup)
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π event loop
        loop = asyncio.get_event_loop()
        if loop.is_running():
            # –ï—Å–ª–∏ loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            import threading
            import concurrent.futures
            
            with concurrent.futures.ThreadPoolExecutor() as executor:
                future = executor.submit(asyncio.run, _send())
                return future.result()
        else:
            return loop.run_until_complete(_send())
    except RuntimeError:
        # –ï—Å–ª–∏ –Ω–µ—Ç event loop, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        return asyncio.run(_send())

if __name__ == '__main__':
    bot = ConstructionBot()
    bot.run()
