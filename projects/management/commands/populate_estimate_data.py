from django.core.management.base import BaseCommand
from django.utils.translation import gettext_lazy as _
from decimal import Decimal
from projects.estimate_models import (
    EstimateCategory, EstimateUnit, EstimateRate
)


class Command(BaseCommand):
    help = '–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ä–∞—Å—Ü–µ–Ω–æ–∫ –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏'

    def handle(self, *args, **options):
        self.stdout.write('üèóÔ∏è –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —Ä–∞—Å—Ü–µ–Ω–æ–∫...')
        
        # –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
        self.create_units()
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç
        self.create_categories()
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏
        self.create_rates()
        
        self.stdout.write(
            self.style.SUCCESS('‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ä–∞—Å—Ü–µ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω!')
        )

    def create_units(self):
        """–°–æ–∑–¥–∞–µ—Ç –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
        units_data = [
            ('–º¬≤', '–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä', '–ü–ª–æ—â–∞–¥—å'),
            ('–º¬≥', '–∫—É–±–∏—á–µ—Å–∫–∏–π –º–µ—Ç—Ä', '–û–±—ä–µ–º'),
            ('–º', '–º–µ—Ç—Ä', '–î–ª–∏–Ω–∞'),
            ('–º.–ø.', '–º–µ—Ç—Ä –ø–æ–≥–æ–Ω–Ω—ã–π', '–ü–æ–≥–æ–Ω–Ω–∞—è –¥–ª–∏–Ω–∞'),
            ('—à—Ç', '—à—Ç—É–∫–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'),
            ('–∫–≥', '–∫–∏–ª–æ–≥—Ä–∞–º–º', '–ú–∞—Å—Å–∞'),
            ('—Ç', '—Ç–æ–Ω–Ω–∞', '–ú–∞—Å—Å–∞'),
            ('—á–∞—Å', '—á–∞—Å', '–í—Ä–µ–º—è'),
            ('–¥–µ–Ω—å', '–¥–µ–Ω—å', '–í—Ä–µ–º—è'),
            ('–º¬≤/–¥–µ–Ω—å', '–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä –≤ –¥–µ–Ω—å', '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'),
        ]
        
        for short_name, name, description in units_data:
            unit, created = EstimateUnit.objects.get_or_create(
                short_name=short_name,
                defaults={
                    'name': name,
                    'description': description,
                    'is_active': True
                }
            )
            if created:
                self.stdout.write(f'  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –µ–¥–∏–Ω–∏—Ü–∞: {name} ({short_name})')
            else:
                self.stdout.write(f'  ‚ÑπÔ∏è –ï–¥–∏–Ω–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {name} ({short_name})')

    def create_categories(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç"""
        categories_data = [
            ('01', '–ó–µ–º–ª—è–Ω—ã–µ —Ä–∞–±–æ—Ç—ã', '–†–∞–±–æ—Ç—ã –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–Ω—Ç–∞'),
            ('02', '–§—É–Ω–¥–∞–º–µ–Ω—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã', '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–æ–≤'),
            ('03', '–°—Ç–µ–Ω—ã –∏ –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∏', '–ö–ª–∞–¥–∫–∞ –∏ –º–æ–Ω—Ç–∞–∂ —Å—Ç–µ–Ω'),
            ('04', '–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏—è', '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π'),
            ('05', '–ö—Ä–æ–≤–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã', '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫—Ä–æ–≤–ª–∏'),
            ('06', '–û—Ç–¥–µ–ª–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã', '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∏ –Ω–∞—Ä—É–∂–Ω–∞—è –æ—Ç–¥–µ–ª–∫–∞'),
            ('07', '–°–∞–Ω—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã', '–í–æ–¥–æ–ø—Ä–æ–≤–æ–¥ –∏ –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è'),
            ('08', '–≠–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã', '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã'),
            ('09', '–û—Ç–æ–ø–ª–µ–Ω–∏–µ –∏ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏—è', '–°–∏—Å—Ç–µ–º—ã –æ—Ç–æ–ø–ª–µ–Ω–∏—è –∏ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏'),
            ('10', '–ë–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', '–ë–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏'),
        ]
        
        for code, name, description in categories_data:
            category, created = EstimateCategory.objects.get_or_create(
                code=code,
                defaults={
                    'name': name,
                    'description': description,
                    'is_active': True
                }
            )
            if created:
                self.stdout.write(f'  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {code} - {name}')
            else:
                self.stdout.write(f'  ‚ÑπÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {code} - {name}')

    def create_rates(self):
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –µ–¥–∏–Ω–∏—Ü—ã
        earth_works = EstimateCategory.objects.get(code='01')
        foundation_works = EstimateCategory.objects.get(code='02')
        walls_works = EstimateCategory.objects.get(code='03')
        finishing_works = EstimateCategory.objects.get(code='06')
        
        m2 = EstimateUnit.objects.get(short_name='–º¬≤')
        m3 = EstimateUnit.objects.get(short_name='–º¬≥')
        m = EstimateUnit.objects.get(short_name='–º')
        mp = EstimateUnit.objects.get(short_name='–º.–ø.')
        kg = EstimateUnit.objects.get(short_name='–∫–≥')
        hour = EstimateUnit.objects.get(short_name='—á–∞—Å')
        
        rates_data = [
            # –ó–µ–º–ª—è–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
            ('01-001', '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–Ω—Ç–∞ —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä–æ–º', earth_works, m3, 
             Decimal('150.00'), Decimal('80.00'), Decimal('60.00'), Decimal('10.00'), Decimal('2.5')),
            ('01-002', '–û–±—Ä–∞—Ç–Ω–∞—è –∑–∞—Å—ã–ø–∫–∞ –≥—Ä—É–Ω—Ç–∞', earth_works, m3,
             Decimal('80.00'), Decimal('40.00'), Decimal('30.00'), Decimal('10.00'), Decimal('1.5')),
            ('01-003', '–£–ø–ª–æ—Ç–Ω–µ–Ω–∏–µ –≥—Ä—É–Ω—Ç–∞', earth_works, m2,
             Decimal('25.00'), Decimal('15.00'), Decimal('8.00'), Decimal('2.00'), Decimal('0.5')),
            
            # –§—É–Ω–¥–∞–º–µ–Ω—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
            ('02-001', '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ª–µ–Ω—Ç–æ—á–Ω–æ–≥–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞', foundation_works, m3,
             Decimal('1200.00'), Decimal('400.00'), Decimal('700.00'), Decimal('100.00'), Decimal('8.0')),
            ('02-002', '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–π –ø–ª–∏—Ç—ã', foundation_works, m3,
             Decimal('1000.00'), Decimal('350.00'), Decimal('600.00'), Decimal('50.00'), Decimal('6.0')),
            ('02-003', '–ì–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞', foundation_works, m2,
             Decimal('180.00'), Decimal('60.00'), Decimal('100.00'), Decimal('20.00'), Decimal('2.0')),
            
            # –°—Ç–µ–Ω—ã –∏ –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∏
            ('03-001', '–ö–ª–∞–¥–∫–∞ –∫–∏—Ä–ø–∏—á–Ω–∞—è', walls_works, m3,
             Decimal('800.00'), Decimal('300.00'), Decimal('450.00'), Decimal('50.00'), Decimal('12.0')),
            ('03-002', '–ö–ª–∞–¥–∫–∞ –∏–∑ –≥–∞–∑–æ–±–µ—Ç–æ–Ω–∞', walls_works, m3,
             Decimal('600.00'), Decimal('200.00'), Decimal('350.00'), Decimal('50.00'), Decimal('8.0')),
            ('03-003', '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–æ–∫ –∏–∑ –ì–ö–õ', walls_works, m2,
             Decimal('350.00'), Decimal('150.00'), Decimal('180.00'), Decimal('20.00'), Decimal('3.0')),
            
            # –û—Ç–¥–µ–ª–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
            ('06-001', '–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞ —Å—Ç–µ–Ω', finishing_works, m2,
             Decimal('180.00'), Decimal('80.00'), Decimal('90.00'), Decimal('10.00'), Decimal('2.5')),
            ('06-002', '–ü–æ–∫—Ä–∞—Å–∫–∞ —Å—Ç–µ–Ω', finishing_works, m2,
             Decimal('120.00'), Decimal('50.00'), Decimal('60.00'), Decimal('10.00'), Decimal('1.5')),
            ('06-003', '–£–∫–ª–∞–¥–∫–∞ –ø–ª–∏—Ç–∫–∏', finishing_works, m2,
             Decimal('400.00'), Decimal('150.00'), Decimal('220.00'), Decimal('30.00'), Decimal('4.0')),
            ('06-004', '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å—Ç—è–∂–∫–∏', finishing_works, m2,
             Decimal('250.00'), Decimal('100.00'), Decimal('130.00'), Decimal('20.00'), Decimal('2.0')),
            ('06-005', '–£–∫–ª–∞–¥–∫–∞ –ª–∞–º–∏–Ω–∞—Ç–∞', finishing_works, m2,
             Decimal('300.00'), Decimal('120.00'), Decimal('160.00'), Decimal('20.00'), Decimal('2.5')),
        ]
        
        for code, name, category, unit, base_price, labor_cost, material_cost, equipment_cost, labor_hours in rates_data:
            rate, created = EstimateRate.objects.get_or_create(
                code=code,
                defaults={
                    'name': name,
                    'category': category,
                    'unit': unit,
                    'base_price': base_price,
                    'labor_cost': labor_cost,
                    'material_cost': material_cost,
                    'equipment_cost': equipment_cost,
                    'labor_hours': labor_hours,
                    'complexity_factor': Decimal('1.00'),
                    'region_factor': Decimal('1.00'),
                    'is_active': True
                }
            )
            if created:
                self.stdout.write(f'  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–∞—Å—Ü–µ–Ω–∫–∞: {code} - {name}')
            else:
                self.stdout.write(f'  ‚ÑπÔ∏è –†–∞—Å—Ü–µ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {code} - {name}')
        
        self.stdout.write(f'  üìä –í—Å–µ–≥–æ —Ä–∞—Å—Ü–µ–Ω–æ–∫: {EstimateRate.objects.count()}')
